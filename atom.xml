<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>yanhan's blog</title>
    <link href="http://blog.pangyanhan.com/atom.xml" rel="self" />
    <link href="http://blog.pangyanhan.com" />
    <id>http://blog.pangyanhan.com/atom.xml</id>
    <author>
        <name>Pang Yan Han</name>
        <email>pangyanhan@gmail.com</email>
    </author>
    <updated>2018-02-20T21:01:11Z</updated>
    <entry>
    <title>Vim abbreviations for a specific file</title>
    <link href="http://blog.pangyanhan.com/posts/vim-abbreviations-for-a-specific-file.html" />
    <id>http://blog.pangyanhan.com/posts/vim-abbreviations-for-a-specific-file.html</id>
    <published>2018-02-20T21:01:11Z</published>
    <updated>2018-02-20T21:01:11Z</updated>
    <summary type="html"><![CDATA[<h2>Vim abbreviations for a specific file</h2>
<p class="meta">
  20 Feb 2018,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/vim.html">vim</a>
</div>
<div class="post">
  <p>Recently I came across Bram Moolenaar’s article <a href="http://moolenaar.net/habits.html">Vim: Seven habits of effective text editing</a> and learnt about vim abbreviations. Essentially, vim abbreviations allow you to specify shortform words that vim will automatically expand to their long form. For instance, with the following in your vimrc:</p>
<div class="highlight"><pre><span></span>ab dev developer
</pre></div>

<p>Whenever you type the word <code>dev</code> followed by a space / enter / punctuation mark, vim will automatically expand it to <code>developer</code>. I am not entirely certain of the rule that vim uses to expand the abbreviation, but it seems to me that vim does it on a word boundary basis. Hence you do not have to be afraid that you cannot type <code>devops</code> for fear that it will be expanded to <code>developerops</code>.</p>
<p>This is pretty useful and can save a lot of typing. There are other pieces of wisdom in the article and I highly encourage you to read it.</p>
<h2 id="how-to-have-file-specific-vim-abbreviations">How to have file specific vim abbreviations</h2>
<p>Which brings us to the meat of this post. How do we have abbreviations that apply to a specific file? Some Googling led to <a href="https://unix.stackexchange.com/a/31602">this Unix &amp; Linux Stack Exchange answer</a> and here’s some example code on how to do it:</p>
<div class="highlight"><pre><span></span><span class="k">au</span> <span class="nb">BufRead</span><span class="p">,</span><span class="nb">BufNewFile</span> <span class="sr">/path/</span><span class="k">to</span>/<span class="k">file</span> <span class="k">call</span> YourAbbrevFunction<span class="p">()</span>
<span class="k">function</span> YourAbbrevFunction<span class="p">()</span>
  <span class="k">ab</span> dev developers
<span class="c">  &quot; define your other abbreviations here</span>
<span class="k">endfunction</span>
</pre></div>

<h3 id="instructions">Instructions</h3>
<ol style="list-style-type: decimal">
<li>Copy and paste the above code to your vimrc file</li>
<li>Define all your desired abbreviations in the <code>YourAbbrevFunction</code> vim function</li>
<li>Change the <code>/path/to/file</code> to the file you want the abbreviations to apply to</li>
<li>If you have an existing vim session editing the <code>/path/to/file</code>, you will need to quit and start it again for the abbreviations to apply</li>
</ol>
<p>Enjoy!</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://unix.stackexchange.com/a/31602">Storing Abbreviations in Vim - Unix &amp; Linux Stack Exchange</a></li>
<li><a href="http://moolenaar.net/habits.html">Vim: Seven habits of effective text editing</a></li>
<li><a href="http://learnvimscriptthehardway.stevelosh.com/chapters/13.html">Learn Vimscript the Hard Way: Buffer-Local Abbreviations</a></li>
<li><a href="http://vim.wikia.com/wiki/Using_abbreviations">Using abbreviations - Vim Tips Wiki</a></li>
</ul>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/vim-abbreviations-for-a-specific-file.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/vim-abbreviations-for-a-specific-file.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>How to disable Control Q on Firefox 57</title>
    <link href="http://blog.pangyanhan.com/posts/disable-control-q-on-firefox-57.html" />
    <id>http://blog.pangyanhan.com/posts/disable-control-q-on-firefox-57.html</id>
    <published>2018-02-20T20:47:45Z</published>
    <updated>2018-02-20T20:47:45Z</updated>
    <summary type="html"><![CDATA[<h2>How to disable Control Q on Firefox 57</h2>
<p class="meta">
  20 Feb 2018,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/firefox.html">firefox</a>
</div>
<div class="post">
  <p><strong>NOTE:</strong> This applies to Firefox 57 on Linux.</p>
<ol style="list-style-type: decimal">
<li>Open a new tab and type <code>about:config</code> in the address bar and press enter</li>
</ol>
<p>You will see a warning. Click on the <code>I accept the risk</code> button.</p>
<ol start="2" style="list-style-type: decimal">
<li>Search for the string <code>showquit</code>. You should see a <code>browser.showQuitWarning</code>. Double click so its value is toggled to True.</li>
</ol>
<p>When you press Control Q, there will be a prompt asking you if you actually want to quit Firefox.</p>
<h2 id="credits">Credits</h2>
<p><a href="https://www.reddit.com/r/firefox/comments/7fehbb/please_give_us_an_option_to_disable_ctrlq/dqbd8su/" class="uri">https://www.reddit.com/r/firefox/comments/7fehbb/please_give_us_an_option_to_disable_ctrlq/dqbd8su/</a></p>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/disable-control-q-on-firefox-57.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/disable-control-q-on-firefox-57.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>My notes / cheatsheet on the top program</title>
    <link href="http://blog.pangyanhan.com/posts/my-notes-on-the-top-program.html" />
    <id>http://blog.pangyanhan.com/posts/my-notes-on-the-top-program.html</id>
    <published>2018-02-11T10:34:00Z</published>
    <updated>2018-02-11T10:34:00Z</updated>
    <summary type="html"><![CDATA[<h2>My notes / cheatsheet on the top program</h2>
<p class="meta">
  11 Feb 2018,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/linux.html">linux</a>, <a href="/tags/unix.html">unix</a>, <a href="/tags/top.html">top</a>, <a href="/tags/devops.html">devops</a>, <a href="/tags/sre.html">sre</a>
</div>
<div class="post">
  <p>Over the last week, I have been spending some of my free time learning how to use the <code>top</code> program.</p>
<p>These are some notes I’ve written on it: <a href="https://github.com/yanhan/notes/blob/master/top.md" class="uri">https://github.com/yanhan/notes/blob/master/top.md</a>.</p>
<p>I believe this is just a 5 minute read, so do check it out!</p>
<h2 id="some-thoughts-comments-on-top">Some thoughts / comments on top</h2>
<p>To someone new to the tool, <code>top</code> can be pretty intimidating. My first impression of <code>top</code> is that it is a black screen that spews out a bunch of information on processes running on the system and updates itself every few seconds. While some of the information is easily understood and useful (such as CPU and memory usage), other information, such as the load average numbers, can seem downright cryptic. Contrast that to more modern monitoring tools that DevOps engineers / SREs make use of, such as <a href="https://www.datadoghq.com">DataDog</a>, which provide beautiful dashboarding, <code>top</code> looks like it can go to the museum.</p>
<p>In my personal experience, even Linux users far more experienced than myself do not use <code>top</code> to identify processes which take up a lot of CPU or memory (granted, such information may be captured in their other monitoring tools). Some of them will use <code>htop</code> instead, which seems to provide the same information but with better visualization on the CPU and memory part - and based on my interactions with them, it does not seem like they are power users of <code>htop</code> either.</p>
<p>We can summarize the downsides of <code>top</code> as follows:</p>
<ul>
<li>intimidating and non-intuitive user interface. Probably need to read some tutorial before being able to use it proficiently</li>
<li>some numbers may not be immediately understandable without reading a tutorial / manpages / etc</li>
<li>there are “better” competitor tools such as <code>htop</code></li>
<li>social effect: given the above, it is likely that your friends / colleagues will recommend usage of another tool and perhaps even recommend you not to use <code>top</code></li>
</ul>
<p>So in light of these, why did I spend time learning it?</p>
<p><strong>The main reason is:</strong> <code>top</code> seems to be available on most Linux systems. Sometimes, it may not be possible to install any arbitrary software on systems I have to debug. On these systems, I find that <code>top</code> is available.</p>
<p>Hopefully my notes will change some negative perceptions about <code>top</code>. I certainly had fun learning it and my impression of it changed totally.</p>
<p>Once again, here is the link: <a href="https://github.com/yanhan/notes/blob/master/top.md" class="uri">https://github.com/yanhan/notes/blob/master/top.md</a></p>
<h2 id="other-stuff">Other stuff</h2>
<p>In the month of January, I was extremely occupied at work; probably the most intense work in my professional career so far. Hence I did not have the time and energy to write a post in January. Hopefully I can keep up my goal of writing one post per month (at the minimum).</p>
<p>I have written a lot of documentation at work and more recently applied the same work ethic on my personal projects. Some of these personal projects are my notes on various technologies, which I eventually hope to open up after some reorganization.</p>
<p>Recently, inspired by <a href="https://jvns.ca/">Julia Evans</a> and <a href="https://twitter.com/b0rk/status/917252215752019968">her comic on How to be a Wizard Programmer</a>, I adopted the practice of writing notes on non-fiction books that I’ve read. I find that it helps me retain the knowledge better. In addition, if I happen to forget what I have read, I know that I have a relatively short reference in the notes and can get up to speed quickly without haviing to read through the entire book (always welcome). The downside is that this takes a lot of work and it means I have less time to do other stuff and especially to read other new material.</p>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/my-notes-on-the-top-program.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/my-notes-on-the-top-program.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>Haskell deep dive: zsh-git-prompt</title>
    <link href="http://blog.pangyanhan.com/posts/haskell-deep-dive-zsh-git-prompt.html" />
    <id>http://blog.pangyanhan.com/posts/haskell-deep-dive-zsh-git-prompt.html</id>
    <published>2017-12-09T13:52:00Z</published>
    <updated>2017-12-09T13:52:00Z</updated>
    <summary type="html"><![CDATA[<h2>Haskell deep dive: zsh-git-prompt</h2>
<p class="meta">
  09 Dec 2017,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/zsh.html">zsh</a>, <a href="/tags/zsh-git-prompt.html">zsh-git-prompt</a>, <a href="/tags/deep%20dive.html">deep dive</a>
</div>
<div class="post">
  <p>In <a href="http://www.catb.org/esr/faqs/hacker-howto.html">How To Become A Hacker</a>, Eric S. Raymond gives the following golden advice:</p>
<blockquote>
<p>Learning to program is like learning to write good natural language. The best way to do it is to read some stuff written by masters of the form, write some things yourself, read a lot more, write a little more, read a lot more, write some more … and repeat until your writing begins to develop the kind of strength and economy you see in your models.</p>
</blockquote>
<p>This year, when I decided to give another shot at learning Haskell again, I realized that I needed not just tutorials to study, but also actual code. The reason is, as much as tutorials help to illustrate concepts, it is in actual code that one learns how to compose things together and see some tricks that are not covered in tutorials. About 6 years ago, I was an active user of Arch Linux and wanted to contribute to their package manager, Pacman. Pacman was written in C, which was a language I was using rather heavily at that time. I thought I knew C, but it was a rather eye opening experience to study the Pacman source code and see some real world C code from a program that I used on a day to day basis. Heck, I even contributed slightly to pacman-key probably as a result of that.</p>
<p>Ok, enough with the stuff that doesn’t concern anyone else.</p>
<p>After some serious searching, I found <a href="https://github.com/olivierverdier/zsh-git-prompt">zsh-git-prompt</a>. It is the probably the first serious Haskell program I’ve studied and understood. What makes this codebase so good for a beginner are:</p>
<ul>
<li>It is pretty short. 464 lines to be precise for <code>.hs</code> files in the <code>src</code> dir based on the output of a find command</li>
<li>It is a real world program. At least for zsh users. What zsh-git-prompt does is, whenever you cd into a directory that is a git repository (and all subdirs in it), it will show you some information about the git repo. For instance, whether the git repo is clean, the number of staged changes, how many commits has it diverged from its tracking branch, etc</li>
<li>Once you install it, you see it all the time you are working with code. If you happen to be learning Haskell and happen to hit a wall and feel like giving up (happens to most people I believe), look at that shiny zsh-git-prompt showing you your git repo’s status and you know that Haskell is capable of doing so much and the difference maker is the person that is between the chair and the keyboard. Extra motivation to work harder to eventually be able to write something useful in Haskell!</li>
</ul>
<h2 id="prerequisite-knowledge">Prerequisite knowledge</h2>
<p>As I was writing this post, I realized that there are a number of things that the reader must know to truly understand the code (even with my guidance) and that for me to explain those concepts in detail will make an already long post even longer.</p>
<p>This knowledge is often summarized by the phrase “the first N chapters of LYAH”, where <code>N</code> is usually 7 and LYAH is the <a href="http://learnyouahaskell.com/">Learn You a Haskell book</a>. I would say that the prereqs for understanding this post is pretty much the first 12 chapters of LYAH. Specifically, the following:</p>
<ul>
<li>Some knowledge of Monads</li>
<li>Definition of the Maybe monad and the List monad. Specifically, each of their definition of <code>&gt;&gt;=</code> and what it does in <code>do</code> notation</li>
</ul>
<p>Non Haskell related knowledge:</p>
<ul>
<li>Some knowledge of git and shell scripting</li>
</ul>
<h2 id="target-audience">Target Audience</h2>
<p>Haskell beginners who have some / all of the prereq knowledge above. You should also be willing to google to find out more information about concepts I didn’t explain too well / skipped over.</p>
<p>If you have read LYAH or similar but you are finding it very hard to use your newfound knowledge to write a real world application, I believe that you will find this post helpful.</p>
<h2 id="software-required">Software required</h2>
<p>It is also highly recommended that you install zsh and zsh-git-prompt; you will doubly appreciate this post and what the zsh-git-prompt does. If you are a zsh user but just lack zsh-git-prompt, check out our <a href="/posts/how-to-install-zsh-git-prompt.html">blog post on how to install zsh-git-prompt</a>.</p>
<p>Alternatively, if you do not wish to go through the hassle of installing zsh and zsh-git-prompt on your system, you can head over to <a href="https://github.com/yanhan/zsh-git-prompt-docker" class="uri">https://github.com/yanhan/zsh-git-prompt-docker</a> to pull / build our Docker image; simply follow the instructions in the README of that repo.</p>
<h2 id="version-we-are-covering">Version we are covering</h2>
<p>We will be going through tag <code>v0.5</code> of zsh-git-prompt. At the time of writing, it happens to be the HEAD of master branch. You can also go to <a href="https://github.com/olivierverdier/zsh-git-prompt/tree/v0.5" class="uri">https://github.com/olivierverdier/zsh-git-prompt/tree/v0.5</a> and browse the files there.</p>
<p>Throughout this post, we will be referencing zsh-git-prompt source code on its GitHub repo that fall under the <code>v0.5</code> tag.</p>
<h2 id="finding-main">Finding main</h2>
<p>Looking at <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/stack.yaml#L7">stack.yaml</a>, we see:</p>
<div class="highlight"><pre><span></span>packages:
- &#39;src&#39;
</pre></div>

<p>which tells us that we should look at the <code>src</code> directory. Listing that directory shows us there is a <code>.cabal</code> file in <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/git-prompt.cabal">git-prompt.cabal</a>. In the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/git-prompt.cabal#L23"><code>executable</code> section</a>, we see the following:</p>
<div class="highlight"><pre><span></span>executable gitstatus
  hs-source-dirs:      app
  main-is:             Main.hs
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  build-depends:       base, git-prompt, parsec &gt;=3.1, process&gt;=1.1.0.2, QuickCheck
  default-language:    Haskell2010
  ghc-options: -Wall -O2 -fno-warn-tabs -fno-warn-unused-do-bind
  cc-options: -O3
</pre></div>

<p>So the main function sits at <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/app/Main.hs">app/Main.hs</a> (within the top level <code>src</code> dir). As an aside, there are very few dependencies on third party libraries.</p>
<p>I have to admit that this is a rather roundabout way to find the main function. In practice, it is much easier to do a <code>git grep -n main</code>. But this process teaches us some stuff about Stack and Cabal.</p>
<h2 id="the-main-function">The main function</h2>
<div class="highlight"><pre><span></span><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
  <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">getContents</span>
  <span class="n">mhash</span> <span class="ow">&lt;-</span> <span class="n">unsafeInterleaveIO</span> <span class="n">gitrevparse</span> <span class="c1">-- defer the execution until we know we need the hash</span>
  <span class="kr">let</span> <span class="n">result</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
    <span class="n">strings</span> <span class="ow">&lt;-</span> <span class="n">stringsFromStatus</span> <span class="n">mhash</span> <span class="n">status</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">unwords</span> <span class="n">strings</span><span class="p">)</span>
  <span class="n">putStr</span> <span class="p">(</span><span class="n">fromMaybe</span> <span class="s">&quot;&quot;</span> <span class="n">result</span><span class="p">)</span>
</pre></div>

<p>Ok. This is short but not very straightforward at first glance. There are some functions that we may not be familiar with, so we turn to <a href="https://www.haskell.org/Hoogle/">Hoogle</a>.</p>
<div class="highlight"><pre><span></span><span class="nf">getContents</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="kt">String</span>
<span class="c1">-- The getContents operation returns all user input as a single string, which</span>
<span class="c1">-- is read lazily as it is needed (same as hGetContents stdin).</span>

<span class="nf">unsafeInterleaveIO</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
<span class="c1">-- unsafeInterleaveIO allows an IO computation to be deferred lazily. When</span>
<span class="c1">-- passed a value of type IO a, the IO will only be performed when the value of</span>
<span class="c1">-- the a is demanded. This is used to implement lazy file reading, see</span>
<span class="c1">-- hGetContents.</span>

<span class="nf">unwords</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
<span class="c1">-- unwords is an inverse operation to words. It joins words with separating</span>
<span class="c1">-- spaces.</span>
</pre></div>

<p>Ok. The first question is, what is with the <code>status &lt;- getContents</code>? It is not like we are supplying any input via stdin to zsh-git-prompt; we simply see the zsh-git-prompt displayed on our terminal when we are in a git repo without having us to do anything. So this input must be coming from somewhere else.</p>
<p>Indeed, if we look at the <a href="https://github.com/olivierverdier/zsh-git-prompt/tree/v0.5#install">Install section of the README</a>, we see the following:</p>
<blockquote>
<p>Source the file zshrc.sh from your ~/.zshrc config file, and configure your prompt. So, somewhere in ~/.zshrc, you should have:</p>
</blockquote>
<div class="highlight"><pre><span></span><span class="nb">source</span> path/to/zshrc.sh
<span class="c1"># an example prompt</span>
<span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%B%m%~%b$(git_super_status) %# &#39;</span>
</pre></div>

<p>The magic lies with the <code>git_super_status</code> zsh function and the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh">zshrc.sh</a> script. We open that file and find the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L64">git_super_status</a> function. This is where the prompt gets constructed. Most notably, it starts with:</p>
<div class="highlight"><pre><span></span>git_super_status() {
    precmd_update_git_vars
</pre></div>

<p>Here’s the definition of the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L32">precmd_update_git_vars</a> function:</p>
<div class="highlight"><pre><span></span><span class="k">function</span> precmd_update_git_vars<span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;</span><span class="nv">$__EXECUTED_GIT_COMMAND</span><span class="s2">&quot;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> ! -n <span class="s2">&quot;</span><span class="nv">$ZSH_THEME_GIT_PROMPT_CACHE</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        update_current_git_vars
        <span class="nb">unset</span> __EXECUTED_GIT_COMMAND
    <span class="k">fi</span>
<span class="o">}</span>
</pre></div>

<p>which points to the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L43">update_current_git_vars</a> function as the likely workhorse:</p>
<div class="highlight"><pre><span></span><span class="k">function</span> update_current_git_vars<span class="o">()</span> <span class="o">{</span>
    <span class="nb">unset</span> __CURRENT_GIT_STATUS

    <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$GIT_PROMPT_EXECUTABLE</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;python&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">local</span> <span class="nv">gitstatus</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$__GIT_PROMPT_DIR</span><span class="s2">/gitstatus.py&quot;</span>
        <span class="nv">_GIT_STATUS</span><span class="o">=</span><span class="sb">`</span>python <span class="si">${</span><span class="nv">gitstatus</span><span class="si">}</span> <span class="m">2</span>&gt;/dev/null<span class="sb">`</span>
    <span class="k">fi</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$GIT_PROMPT_EXECUTABLE</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;haskell&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">_GIT_STATUS</span><span class="o">=</span><span class="sb">`</span>git status --porcelain --branch <span class="p">&amp;</span>&gt; /dev/null <span class="p">|</span> <span class="nv">$__GIT_PROMPT_DIR</span>/src/.bin/gitstatus<span class="sb">`</span>
    <span class="k">fi</span>
     <span class="nv">__CURRENT_GIT_STATUS</span><span class="o">=(</span><span class="s2">&quot;</span><span class="si">${</span><span class="p">(@s: :)_GIT_STATUS</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">)</span>
  <span class="nv">GIT_BRANCH</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">1</span><span class="o">]</span>
  <span class="nv">GIT_AHEAD</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">2</span><span class="o">]</span>
  <span class="nv">GIT_BEHIND</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">3</span><span class="o">]</span>
  <span class="nv">GIT_STAGED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">4</span><span class="o">]</span>
  <span class="nv">GIT_CONFLICTS</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">5</span><span class="o">]</span>
  <span class="nv">GIT_CHANGED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">6</span><span class="o">]</span>
  <span class="nv">GIT_UNTRACKED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">7</span><span class="o">]</span>
<span class="o">}</span>
</pre></div>

<p>What should catch our attention is the following 3 lines:</p>
<div class="highlight"><pre><span></span>    <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$GIT_PROMPT_EXECUTABLE</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;haskell&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">_GIT_STATUS</span><span class="o">=</span><span class="sb">`</span>git status --porcelain --branch <span class="p">&amp;</span>&gt; /dev/null <span class="p">|</span> <span class="nv">$__GIT_PROMPT_DIR</span>/src/.bin/gitstatus<span class="sb">`</span>
    <span class="k">fi</span>
</pre></div>

<p>Suppose <code>GIT_PROMPT_EXECUTABLE</code> has the value <code>haskell</code>. Then <code>git status --porcelain --branch &amp;&gt;/dev/null | $__GIT_PROMPT_DIR/src/.bin/gitstatus</code> is executed. Despite some experience in Bash, the <code>&amp;&gt;</code> tripped me up because I didn’t use it. So I did some googling and I found out that in Bash, the <code>&amp;&gt;</code> redirects both standard output and standard error to the same location, which in this case, is <code>/dev/null</code>.</p>
<p>That doesn’t make sense. If both standard output and standard error are redirected to <code>/dev/null</code>, wouldn’t the <code>$__GIT_PROMPT_DIR/src/.bin/gitstatus</code> program not get any input? Or, does that program not require any standard input and it will just work? To verify, I ran the following commands in a git repo:</p>
<div class="highlight"><pre><span></span>git status --porcelain --branch &amp;&gt;/dev/null | $__GIT_PROMPT_DIR/src/.bin/gitstatus
</pre></div>

<p>versus</p>
<div class="highlight"><pre><span></span>$__GIT_PROMPT_DIR/src/.bin/git status &lt;/dev/null
</pre></div>

<p>The first showed me:</p>
<div class="highlight"><pre><span></span>master 95 0 0 0 1 1
</pre></div>

<p>and the second did not output anything. So clearly, it was receiving standard input from the <code>git status --porcelain --branch</code> command!</p>
<p>At this point, I was wondering, what the hell was going on? If all output from the <code>git status --porcelain --branch</code> command was redirected to <code>/dev/null</code>, shouldn’t it effectively be doing the same thing as supplying no standard input to the next program?</p>
<p>I tried a few other things but this one kind of blew my mind:</p>
<div class="highlight"><pre><span></span>git status --porcelain --branch &amp;&gt;/dev/null &gt;a &gt;o
</pre></div>

<p>Both <code>a</code> and <code>o</code> contained the output of the command! Seems like there is multiple output redirection going on. Something I didn’t know was possible.</p>
<p>A google search for “stdout redirect to multiple linux” turned out the usual answers (most commonly using <code>tee</code>), but also <a href="https://unix.stackexchange.com/a/129184">this answer on Unix &amp; Linux Stack Exchange</a>:</p>
<blockquote>
<p>With zsh:</p>
</blockquote>
<div class="highlight"><pre><span></span>ls &gt; file1 &gt; file2
</pre></div>

<blockquote>
<p>(internally, zsh creates a pipe and spawns a process that reads from that pipe and writes to the two files as tee does. ls stdout is the other end of the pipe).</p>
</blockquote>
<p>and also the <a href="https://unix.stackexchange.com/a/345508">following answer</a>:</p>
<blockquote>
<p>As <span class="citation">@jofel</span> mentioned in a comment under the answer, this can be done natively in zsh:</p>
</blockquote>
<div class="highlight"><pre><span></span>echo foobar &gt;file1 &gt;file2 &gt;file3
</pre></div>

<blockquote>
<p>or, with brace expansion:</p>
</blockquote>
<div class="highlight"><pre><span></span>echo foobar &gt;file{1..3}
</pre></div>

<blockquote>
<p>Internally this works very similarly to the tee answers provided above. The shell connects the command’s stdout to a process that pipes to multiple files; therefore, there isn’t any compelling technical advantage to doing it this way (but it does look real good). See the zsh manual for more.</p>
</blockquote>
<p>And it links to the <a href="http://zsh.sourceforge.net/Doc/Release/Redirection.html">Redirection chapter of the zsh manual</a>. Turns out zsh has a feature known as Multios that allows multiple output redirection. That section opens with:</p>
<blockquote>
<p>If the user tries to open a file descriptor for writing more than once, the shell opens the file descriptor as a pipe to a process that copies its input to all the specified outputs, similar to tee, provided the MULTIOS option is set, as it is by default. Thus:</p>
</blockquote>
<div class="highlight"><pre><span></span>date &gt;foo &gt;bar
</pre></div>

<blockquote>
<p>writes the date to two files, named ‘foo’ and ‘bar’. Note that a pipe is an implicit redirection; thus</p>
</blockquote>
<div class="highlight"><pre><span></span>date &gt;foo | cat
</pre></div>

<blockquote>
<p>writes the date to the file ‘foo’, and also pipes it to cat.</p>
</blockquote>
<p>So we totally misunderstood the context. Our premise of reasoning about the behavior of the command in Bash is totally wrong because we are not using Bash but zsh!</p>
<p>Therefore</p>
<div class="highlight"><pre><span></span>git status --porcelain --branch &amp;&gt;/dev/null | $__GIT_PROMPT_DIR/src/.bin/gitstatus
</pre></div>

<p>does indeed redirect the standard output of <code>git status --porcelain --branch</code> to the <code>$__GIT_PROMPT_DIR/src/.bin/gitstatus</code> program.</p>
<p>Looking at the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/stack.yaml#L30">lines 30 to 34 of stack.yaml</a>:</p>
<div class="highlight"><pre><span></span># Extra directories used by stack for building
# extra-include-dirs: [/path/to/dir]
# extra-lib-dirs: [/path/to/dir]

local-bin-path: &#39;./src/.bin&#39;
</pre></div>

<p>and <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/git-prompt.cabal#L23">line 23 of src/git-prompt.cabal</a>:</p>
<div class="highlight"><pre><span></span>executable gitstatus
</pre></div>

<p>We see that <code>stack install</code> will indeed build a program named <code>gitstatus</code> and place it in the <code>src/.bin</code> directory of the repo. So indeed our guess that something else is piping its output as standard input to the main function of the zsh-git-prompt Haskell program is correct. So we explained a grand total of… one truly meaningful line of Haskell code:</p>
<div class="highlight"><pre><span></span><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
  <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">getContents</span>
</pre></div>

<p>Nevertheless, we have learnt a lot more about how zsh-git-prompt works overall. Let’s return to our main function:</p>
<div class="highlight"><pre><span></span><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
  <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">getContents</span>
  <span class="n">mhash</span> <span class="ow">&lt;-</span> <span class="n">unsafeInterleaveIO</span> <span class="n">gitrevparse</span> <span class="c1">-- defer the execution until we know we need the hash</span>
  <span class="kr">let</span> <span class="n">result</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
    <span class="n">strings</span> <span class="ow">&lt;-</span> <span class="n">stringsFromStatus</span> <span class="n">mhash</span> <span class="n">status</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">unwords</span> <span class="n">strings</span><span class="p">)</span>
  <span class="n">putStr</span> <span class="p">(</span><span class="n">fromMaybe</span> <span class="s">&quot;&quot;</span> <span class="n">result</span><span class="p">)</span>
</pre></div>

<p>The next line of code is:</p>
<div class="highlight"><pre><span></span>  <span class="n">mhash</span> <span class="ow">&lt;-</span> <span class="n">unsafeInterleaveIO</span> <span class="n">gitrevparse</span> <span class="c1">-- defer the execution until we know we need the hash</span>
</pre></div>

<p>and from our Hoogle search above:</p>
<div class="highlight"><pre><span></span><span class="nf">unsafeInterleaveIO</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="n">a</span>
<span class="c1">-- unsafeInterleaveIO allows an IO computation to be deferred lazily. When</span>
<span class="c1">-- passed a value of type IO a, the IO will only be performed when the value of</span>
<span class="c1">-- the a is demanded. This is used to implement lazy file reading, see</span>
<span class="c1">-- hGetContents.</span>
</pre></div>

<p>So <code>unsafeInterleaveIO gitrevparse</code> will only call the <code>gitrevparse</code> function when necessary. As for why it is unsafe, please read <a href="https://stackoverflow.com/questions/13263692/when-is-unsafeinterleaveio-unsafe">this Stack Overflow question and its answers</a>. Truth to be told, I do not know enough to explain it and any explanation will make this already long post even longer.</p>
<p>The <code>gitrevparse</code> function is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/app/Main.hs#L20">defined in the src/app/Main.hs file</a> and is as follows:</p>
<div class="highlight"><pre><span></span><span class="nf">gitrevparse</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Hash</span><span class="p">)</span>
<span class="nf">gitrevparse</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
    <span class="n">mresult</span> <span class="ow">&lt;-</span> <span class="n">safeRun</span> <span class="s">&quot;git&quot;</span> <span class="p">[</span><span class="s">&quot;rev-parse&quot;</span><span class="p">,</span> <span class="s">&quot;--short&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">]</span>
    <span class="kr">let</span> <span class="n">rev</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">result</span> <span class="ow">&lt;-</span> <span class="n">mresult</span>
      <span class="n">return</span> <span class="p">(</span><span class="kt">MkHash</span> <span class="p">(</span><span class="n">init</span> <span class="n">result</span><span class="p">))</span>
    <span class="n">return</span> <span class="n">rev</span>
</pre></div>

<p>Here is the <code>safeRun</code> function, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/app/Main.hs#L14">also in the src/app/Main.hs file</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">safeRun</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">String</span><span class="p">)</span>
<span class="nf">safeRun</span> <span class="n">command</span> <span class="n">arguments</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- IO</span>
    <span class="n">output</span> <span class="ow">&lt;-</span> <span class="n">readProcessWithExitCode</span> <span class="n">command</span> <span class="n">arguments</span> <span class="s">&quot;&quot;</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">successOrNothing</span> <span class="n">output</span><span class="p">)</span>
</pre></div>

<p>Some relevant documentation for the <code>System.Process.readProcessWithExitCode</code> function:</p>
<div class="highlight"><pre><span></span><span class="nf">readProcessWithExitCode</span>
  <span class="ow">::</span> <span class="kt">FilePath</span>                         <span class="c1">-- Filename of the executable</span>
  <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>                         <span class="c1">-- any arguments</span>
  <span class="ow">-&gt;</span> <span class="kt">String</span>                           <span class="c1">-- standard input</span>
  <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">ExitCode</span><span class="p">,</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span>    <span class="c1">-- exitcode, stdout, stderr</span>

<span class="c1">-- readProcessWithExitCode is like readProcess but with two differences:</span>
<span class="c1">-- * it returns the ExitCode of the process, and does not throw any exception if</span>
<span class="c1">--   the code is not ExitSuccess</span>
<span class="c1">-- * it reads and returns the output from process&#39; standard error handle, rather</span>
<span class="c1">--   than the process inheriting the standard error handle.</span>
</pre></div>

<p>Some relevant documentation for the <code>System.Process.readProcess</code> function:</p>
<div class="highlight"><pre><span></span><span class="nf">readProcess</span>
  <span class="ow">::</span> <span class="kt">FilePath</span>     <span class="c1">-- Filename of the executable (see RawCommand for details)</span>
  <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>     <span class="c1">-- any arguments</span>
  <span class="ow">-&gt;</span> <span class="kt">String</span>       <span class="c1">-- standard input</span>
  <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="kt">String</span>    <span class="c1">-- stdout</span>

<span class="c1">-- readProcess forks an external process, reads its standard output strictly,</span>
<span class="c1">-- blocking until the process terminates, and returns the output string. The</span>
<span class="c1">-- external process inherits the standard error.</span>
<span class="c1">--</span>
<span class="c1">-- If an asynchronous exception is thrown to the thread executing readProcess,</span>
<span class="c1">-- the forked process will be terminated and readProcess will wait (block) until</span>
<span class="c1">-- the process has been terminated.</span>
<span class="c1">--</span>
<span class="c1">-- Output is returned strictly, so this is not suitable for interactive</span>
<span class="c1">-- applications.</span>
</pre></div>

<p>Hence, the following code:</p>
<div class="highlight"><pre><span></span><span class="nf">gitrevparse</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Hash</span><span class="p">)</span>
<span class="nf">gitrevparse</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
    <span class="n">mresult</span> <span class="ow">&lt;-</span> <span class="n">safeRun</span> <span class="s">&quot;git&quot;</span> <span class="p">[</span><span class="s">&quot;rev-parse&quot;</span><span class="p">,</span> <span class="s">&quot;--short&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">]</span>
    <span class="c1">-- some code omitted</span>

<span class="nf">safeRun</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">String</span><span class="p">)</span>
<span class="nf">safeRun</span> <span class="n">command</span> <span class="n">arguments</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- IO</span>
    <span class="n">output</span> <span class="ow">&lt;-</span> <span class="n">readProcessWithExitCode</span> <span class="n">command</span> <span class="n">arguments</span> <span class="s">&quot;&quot;</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">successOrNothing</span> <span class="n">output</span><span class="p">)</span>
</pre></div>

<p>is equivalent to running <code>git rev-parse --short HEAD</code> on the command line while supplying the empty string as stdin, waits for it to finish, then send the <code>(ExitCode, stdout, stderr)</code> 3-tuple to the <code>successOrNothing</code> function, which is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/app/Main.hs#L10">also defined in the src/app/Main.hs file</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">successOrNothing</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">ExitCode</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="n">a</span>
<span class="nf">successOrNothing</span> <span class="p">(</span><span class="n">exitCode</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">=</span>
  <span class="kr">if</span> <span class="n">exitCode</span> <span class="o">==</span> <span class="kt">ExitSuccess</span> <span class="kr">then</span> <span class="kt">Just</span> <span class="n">output</span> <span class="kr">else</span> <span class="kt">Nothing</span>
</pre></div>

<p><code>successOrNothing</code> is pretty straightforward; if our <code>git rev-parse --short HEAD</code> command exited successfully, then it will return the standard output string wrapped in a <code>Just</code>. Otherwise, it returns a <code>Nothing</code>.</p>
<p>Going back to the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/app/Main.hs#L20">gitrevparse function</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">gitrevparse</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Hash</span><span class="p">)</span>
<span class="nf">gitrevparse</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
    <span class="n">mresult</span> <span class="ow">&lt;-</span> <span class="n">safeRun</span> <span class="s">&quot;git&quot;</span> <span class="p">[</span><span class="s">&quot;rev-parse&quot;</span><span class="p">,</span> <span class="s">&quot;--short&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">]</span>
    <span class="kr">let</span> <span class="n">rev</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">result</span> <span class="ow">&lt;-</span> <span class="n">mresult</span>
      <span class="n">return</span> <span class="p">(</span><span class="kt">MkHash</span> <span class="p">(</span><span class="n">init</span> <span class="n">result</span><span class="p">))</span>
    <span class="n">return</span> <span class="n">rev</span>
</pre></div>

<p>we see the use of the Maybe monad. If <code>git rev-parse --short HEAD</code> ran successfully, then <code>mresult</code> will be a <code>Just String</code>. The <code>result &lt;- mresult</code> will then extract the standard output string, and <code>init result</code> will return everything except the last character, which in this case is a newline. If you run <code>git rev-parse --short HEAD</code> in a git repo, its standard output will be a short git commit SHA1 similar to <code>055f126c</code> and ending with a newline. This git commit SHA1 is then passed to the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L9">MkHash data constructor</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">newtype</span> <span class="kt">Hash</span> <span class="ow">=</span> <span class="kt">MkHash</span> <span class="p">{</span><span class="n">getHash</span> <span class="ow">::</span> <span class="kt">String</span><span class="p">}</span>
</pre></div>

<p>which turns out to be a newtype wrapper. The <code>return</code> then wraps the whole thing in a <code>Just</code> again.</p>
<p>To summarize what the <code>gitrevparse</code> function does:</p>
<ul>
<li>It runs <code>git rev-parse --short HEAD</code> and if successful, returns a <code>Just (MkHash s)</code> where <code>s</code> is a <code>String</code> wrapped in a <code>Hash</code> newtype that represents the git commit SHA1 that the HEAD is on</li>
<li>If <code>git rev-parse --short HEAD</code> fails, then a <code>Nothing</code> is returned.</li>
</ul>
<p>Let us revisit the main function again:</p>
<div class="highlight"><pre><span></span><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
  <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">getContents</span>
  <span class="n">mhash</span> <span class="ow">&lt;-</span> <span class="n">unsafeInterleaveIO</span> <span class="n">gitrevparse</span> <span class="c1">-- defer the execution until we know we need the hash</span>
  <span class="kr">let</span> <span class="n">result</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
    <span class="n">strings</span> <span class="ow">&lt;-</span> <span class="n">stringsFromStatus</span> <span class="n">mhash</span> <span class="n">status</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">unwords</span> <span class="n">strings</span><span class="p">)</span>
  <span class="n">putStr</span> <span class="p">(</span><span class="n">fromMaybe</span> <span class="s">&quot;&quot;</span> <span class="n">result</span><span class="p">)</span>
</pre></div>

<p>Tying all that we know so far, we may or may not need the output of <code>git rev-parse --short HEAD</code>, hence the use of <code>unsafeInterleaveIO</code> to defer the computation. This deferred <code>IO (Maybe Hash)</code> action, along with <code>status</code> (which contains the output of <code>git status --porcelain --branch &amp;&gt;/dev/null</code>) are passed to the <code>stringsFromStatus</code> function, which seems to be doing the bulk of the work. We know this because a Hoogle search shows the following docs for <code>unwords</code> and <code>fromMaybe</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">unwords</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
<span class="c1">-- unwords is an inverse operation to words. It joins words with separating</span>
<span class="c1">-- spaces.</span>

<span class="nf">fromMaybe</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
<span class="c1">-- The fromMaybe function takes a default value and a Maybe value. If the Maybe</span>
<span class="c1">-- is a Nothing, it returns the default value; otherwise it returns the value</span>
<span class="c1">-- contained in the Maybe.</span>
</pre></div>

<p>So we pretty much covered the main function. Let’s get to the <code>stringsFromStatus</code> function next.</p>
<h2 id="the-stringsfromstatus-function">The <code>stringsFromStatus</code> function</h2>
<p>We can find the <code>stringsFromStatus</code> function in <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L64">src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">stringsFromStatus</span> <span class="ow">::</span> <span class="kt">Maybe</span> <span class="kt">Hash</span>
                  <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="c1">-- status</span>
                  <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">stringsFromStatus</span> <span class="n">h</span> <span class="n">status</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- List</span>
    <span class="n">processed</span> <span class="ow">&lt;-</span> <span class="n">processGitStatus</span> <span class="p">(</span><span class="n">lines</span> <span class="n">status</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">showGitInfo</span> <span class="n">h</span> <span class="n">processed</span><span class="p">)</span>
</pre></div>

<p>The comment on line 67 is a mistake; this function lives inside the <code>Maybe</code> monad, not the <code>List</code> monad. Anyways. Here is some relevant documentation for <code>lines</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">lines</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="c1">-- lines breaks a string up into a list of strings at newline characters. The</span>
<span class="c1">-- resulting strings do not contain newlines.</span>
<span class="c1">-- Note that after splitting the string at newline characters, the last part of</span>
<span class="c1">-- the string is considered a line even if it doesn&#39;t end with a newline.</span>
</pre></div>

<p>So <code>lines status</code> will break the output of <code>git status --porcelain --branch</code>, which can consist of multiple lines, into a list of <code>String</code>, with each element in the list being one line in the original string. This list of strings is then passed to <code>processGitStatus</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L21">defined as follows</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">processGitStatus</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">GitInfo</span>
<span class="nf">processGitStatus</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
<span class="nf">processGitStatus</span> <span class="p">(</span><span class="n">branchLine</span><span class="kt">:</span><span class="n">statusLines</span><span class="p">)</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">mbranch</span> <span class="ow">&lt;-</span> <span class="n">processBranch</span> <span class="n">branchLine</span>
      <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">processStatus</span> <span class="n">statusLines</span>
      <span class="n">return</span> <span class="p">(</span><span class="kt">MkGitInfo</span> <span class="n">mbranch</span> <span class="n">status</span><span class="p">)</span>
</pre></div>

<p>As its name suggests, <code>processGitStatus</code> handles output from <code>git status</code>. Specifically, <code>git status --porcelain --branch &amp;&gt;/dev/null</code>.</p>
<p>We will deal with the easy case first, where <code>processGitStatus</code> pattern matches its first argument against the empty list. In this case, a <code>Nothing</code> is returned. This case happens when <code>git status --porcelain --branch &amp;&gt;/dev/null</code> does not print anything to standard output, which occurs when we are not in a git repo. (Verify it!)</p>
<p>The other pattern match will lead us deeper into the code. It is a pattern match against a non-empty list. For this pattern match, we see that the author once again uses the <code>do</code> notation and we are inside the <code>Maybe</code> monad. First, the head of the list is bound to <code>branchLine</code> and passed to the <code>processBranch</code> function, which also lives inside the <code>Maybe</code> monad.</p>
<p>To understand the motivation behind this code, we have to know what the <code>git status --porcelain --branch</code> command is outputting. Here is the <a href="https://git-scm.com/docs/git-status/2.15.0#git-status---porcelainltversiongt">documentation for the <code>--porcelain</code> flag from the git status 2.15.0 manpage</a>:</p>
<blockquote>
<p>–porcelain[=&lt;version&gt;]</p>
<p>  Give the output in an easy-to-parse format for scripts. This is similar to the short output, but will remain stable across Git versions and regardless of user configuration. See below for details.</p>
<p>  The version parameter is used to specify the format version. This is optional and defaults to the original version v1 format.</p>
</blockquote>
<p>and <a href="https://git-scm.com/docs/git-status/2.15.0#git-status--b">documentation for the <code>--branch</code> flag</a>:</p>
<blockquote>
<p>-b</p>
<p>--branch</p>
<p>  Show the branch and tracking info even in short-format.</p>
</blockquote>
<p>and the final part of the <a href="https://git-scm.com/docs/git-status/2.15.0#_short_format">docs explaining the short-format output</a>:</p>
<blockquote>
<p>If -b is used the short-format status is preceded by a line</p>
<p>  ## branchname tracking info</p>
</blockquote>
<p>Armed with this information, we know that <code>git status --porcelain --branch</code>:</p>
<ul>
<li>is a form of git status whose output is easy to parse for scripts and is similar to the short-format output</li>
<li>uses the porcelain v1 format</li>
<li>will show the branch and tracking info as the first line. This line looks similar to <code>&quot;  ## branchname tracking info&quot;</code> and is precisely what the <code>processGitStatus</code> function passes to the <code>processBranch</code> function</li>
</ul>
<p>The <code>processBranch</code> function is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L18">defined in the same file</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">processBranch</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">MBranchInfo</span>
<span class="nf">processBranch</span> <span class="ow">=</span> <span class="n">rightOrNothing</span> <span class="o">.</span> <span class="n">branchInfo</span>
</pre></div>

<p>From <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L4">line 4 of the same file</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">import</span> <span class="nn">BranchParse</span> <span class="p">(</span><span class="kt">Branch</span><span class="p">(</span><span class="kt">MkBranch</span><span class="p">),</span> <span class="kt">MBranchInfo</span><span class="p">,</span> <span class="kt">BranchInfo</span><span class="p">(</span><span class="kt">MkBranchInfo</span><span class="p">),</span> <span class="nf">branchInfo</span><span class="p">,</span> <span class="nf">getDistance</span><span class="p">,</span> <span class="nf">pairFromDistance</span><span class="p">,</span> <span class="kt">Remote</span><span class="p">)</span>
</pre></div>

<p>we see that both the <code>MBranchInfo</code> type and the <code>branchInfo</code> function are defined in <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs">src/src/BranchParse.hs</a>. That is where we shall go to next.</p>
<h2 id="the-branchinfo-function">The <code>branchInfo</code> function</h2>
<p>The <code>branchInfo</code> function is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L150">defined at line 150 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchInfo</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Either</span> <span class="kt">ParseError</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchInfo</span> <span class="ow">=</span> <span class="n">parse</span> <span class="n">branchParser&#39;</span> <span class="s">&quot;&quot;</span>
</pre></div>

<p>The <code>parse</code> function is from the <a href="https://hackage.haskell.org/package/parsec">Parsec library</a>. I am not the best guy to explain what Parsec does even though I know how to use it, but a simple explanation is, Parsec allows one to write parsers that look and work very much the same way as <a href="https://en.wikipedia.org/wiki/Context-free_grammar">Context Free Grammars</a>. Since Context Free Languages are a superset of Regular Languages, by extension, one can use Parsec to write Regular Expressions as well (even though they will look like CFGs) - do note that regexes in many languages are not truly regular and I am not certain how much of these non-regular features Parsec provides.</p>
<p>The docs for <code>parse</code> are slightly… difficult. But we will be needing its type signature, so here goes:</p>
<div class="highlight"><pre><span></span><span class="nf">parse</span> <span class="ow">::</span> <span class="kt">Stream</span> <span class="n">s</span> <span class="kt">Identity</span> <span class="n">t</span> <span class="ow">=&gt;</span> <span class="kt">Parsec</span> <span class="n">s</span> <span class="nb">()</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">SourceName</span> <span class="ow">-&gt;</span> <span class="n">s</span> <span class="ow">-&gt;</span> <span class="kt">Either</span> <span class="kt">ParseError</span> <span class="n">a</span>
</pre></div>

<p>The simpler way to explain it is, it takes in a <code>Parsec</code> “object” which is the parser, followed by a <code>String</code> (actually a type synonym named <code>SourceName</code> that is equivalent to <code>String</code>; usually I just use the empty string), followed by a <code>String</code> / <code>Text</code> / similar (in this case a <code>String</code>) containing the content we want to parse using the parser given in the first argument. Note that currying is used here because only 2 arguments were given to <code>parse</code> when it needs 3; that is reflected in the type signature of <code>branchInfo</code>, because it returns a function that takes in a <code>String</code> argument.</p>
<p>On success, <code>parse</code> returns a <code>Right a</code>. Based on the type signature of <code>branchInfo</code>, this <code>a</code> is an <code>MBranchInfo</code> - that is defined in the same file. On failure, <code>parse</code> returns a <code>Left ParseError</code>; a <code>ParseError</code> is a data type defined in the Parsec library that represents, well, a parse error.</p>
<p>Before we get into <code>branchParser'</code>, recall how we got here. We were in the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L23">second half of processGitStatus</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">processGitStatus</span> <span class="p">(</span><span class="n">branchLine</span><span class="kt">:</span><span class="n">statusLines</span><span class="p">)</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">mbranch</span> <span class="ow">&lt;-</span> <span class="n">processBranch</span> <span class="n">branchLine</span>
</pre></div>

<p>where we were handed the first line in the output of <code>git status --porcelain --branch</code>, which is bound to <code>branchLine</code>.</p>
<div class="highlight"><pre><span></span><span class="nf">processBranch</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">MBranchInfo</span>
<span class="nf">processBranch</span> <span class="ow">=</span> <span class="n">rightOrNothing</span> <span class="o">.</span> <span class="n">branchInfo</span>
</pre></div>

<p>And <code>processBranch</code> calls <code>branchInfo</code> and hands <code>branchLine</code> to it. Which <code>branchInfo</code> will now attempt to parse using the <code>branchParser'</code> parser.</p>
<h2 id="parsing-the-branch-line">Parsing the branch line</h2>
<p><code>branchParser'</code> is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L122">defined in src/src/Branchparse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchParser&#39;</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser&#39;</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">string</span> <span class="s">&quot;## &quot;</span>
    <span class="n">branchParser</span>
</pre></div>

<p><code>Parser</code> is a type synonym for <code>Parsec String ()</code> and is defined in <code>Text.Parsec.String</code> of the Parsec library. <code>MBranchInfo</code> is a type synonym for <code>Maybe BranchInfo</code> and is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L63">defined on line 63 of src/src/BranchParse.hs</a>. <code>BranchInfo</code> is a type constructor <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L61">defined on line 61 of src/src/BranchParse.hs</a>. Hence, <code>Parser MBranchInfo</code> expands to <code>Parsec String () (Maybe BranchInfo)</code>. What this means is, if there are no parsing errors, we get a <code>Maybe BranchInfo</code>. (Not exactly but we’ll get to that later).</p>
<p>The <code>string</code> function is from the Parsec library. It literally looks for the string supplied to it in the content it is supposed to parse. In this case, it looks for the <code>##</code> string (there is a trailing space but it doesn’t show up in the HTML here) in the first line of <code>git status --porcelain --branch</code>. If that line starts with the given string, we move on to the next parser ,<code>branchParser</code>. Otherwise, a <code>ParseError</code> results and parsing stops.</p>
<p>Note that the <code>branchParser'</code> code uses <code>do</code> notation (once again) but this time we are in the <code>Parser</code> or equivalently <code>Parsec String ()</code> monad.</p>
<p>Here is the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L114">definition of branchParser</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchParser</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser</span> <span class="ow">=</span>
      <span class="n">try</span> <span class="n">noBranch</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">newRepo</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemoteTracking</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemote</span>
    <span class="o">&lt;|&gt;</span> <span class="n">branchOnly</span>
</pre></div>

<p>This consumes the remaining of the line after the <code>##</code> (with a trailing space). <code>try</code> and <code>&lt;|&gt;</code> are both defined in the Parsec library and they are often used together. The documentation for <code>&lt;|&gt;</code> is especially good:</p>
<div class="highlight"><pre><span></span><span class="p">(</span><span class="o">&lt;|&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span>
<span class="c1">-- This combinator implements choice. The parser p &lt;|&gt; q first applies p. If it</span>
<span class="c1">-- succeeds, the value of p is returned. If p fails without consuming any input,</span>
<span class="c1">-- parser q is tried. This combinator is defined equal to the mplus member of</span>
<span class="c1">-- the MonadPlus class and the (&lt;|&gt;) member of Alternative.</span>
</pre></div>

<p>The initial part of the documentation for the <code>try</code> function is pretty good too:</p>
<div class="highlight"><pre><span></span><span class="nf">try</span> <span class="ow">::</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span>
<span class="c1">-- The parser try p behaves like parser p, except that it pretends that it</span>
<span class="c1">-- hasn&#39;t consumed any input when an error occurs.</span>
<span class="c1">--</span>
<span class="c1">-- This combinator is used whenever arbitrary look ahead is needed. Since it</span>
<span class="c1">-- pretends that it hasn&#39;t consumed any input when p fails, the (&lt;|&gt;) combinator</span>
<span class="c1">-- will try its second alternative even when the first parser failed while</span>
<span class="c1">-- consuming input.</span>
</pre></div>

<p>Essentially, <code>branchParser</code> will first attempt to parse the input string using the <code>try noBranch</code> parser, then if that fails, the <code>try</code> will ensure that no input is consumed by <code>noBranch</code> - and because no input is consumed, the <code>&lt;|&gt;</code> will then move on to the next parser, which is <code>try newRepo</code>. And if that fails, no input will be consumed, and it moves on to <code>try branchRemoteTracking</code>, and so on, in the specified order. If there is any successful parse, the parsing halts. People with knowledge of CFGs will appreciate how this code looks.</p>
<p>To understand each of these parsers, we need to play around with some git repositories and observe the output of the <code>git status --porcelain --branch</code> command. In this process, we will also be learning more about Parsec.</p>
<h3 id="the-nobranch-parser">The <code>noBranch</code> parser</h3>
<p>First off the list, the <code>noBranch</code> parser (<a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L71">defined here</a>):</p>
<div class="highlight"><pre><span></span><span class="nf">noBranch</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">noBranch</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">manyTill</span> <span class="n">anyChar</span> <span class="p">(</span><span class="n">try</span> <span class="p">(</span><span class="n">string</span> <span class="s">&quot; (no branch)&quot;</span><span class="p">))</span>
    <span class="n">eof</span>
    <span class="n">return</span> <span class="kt">Nothing</span>
</pre></div>

<p>The <code>manyTill</code>, <code>anyChar</code> and <code>eof</code> parsers are new to us. They are defined in the Parsec library and pretty much do what they say.</p>
<div class="highlight"><pre><span></span><span class="nf">manyTill</span> <span class="ow">::</span> <span class="kt">Stream</span> <span class="n">s</span> <span class="n">m</span> <span class="n">t</span> <span class="ow">=&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">end</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
<span class="c1">-- manyTill p end applies parser p zero or more times until parser end succeeds.</span>
<span class="c1">-- Returns the list of values returned by p.</span>

<span class="nf">anyChar</span> <span class="ow">::</span> <span class="kt">Stream</span> <span class="n">s</span> <span class="n">m</span> <span class="kt">Char</span> <span class="ow">=&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="kt">Char</span>
<span class="c1">-- This parser succeeds for any character. Returns the parsed character.</span>

<span class="nf">eof</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Stream</span> <span class="n">s</span> <span class="n">m</span> <span class="n">t</span><span class="p">,</span> <span class="kt">Show</span> <span class="n">t</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="nb">()</span>
<span class="c1">-- This parser only succeeds at the end of the input. This is not a primitive</span>
<span class="c1">-- but it is defined using notFollowedBy.</span>
</pre></div>

<p>So <code>manyTill anyChar (try (string &quot; (no branch)&quot;))</code> will apply the <code>anyChar</code> parser zero or more times until the <code>try (string &quot; (no branch)&quot;)</code> parser succeeds. On success, it returns a list of all the <code>Char</code> consumed by <code>anyChar</code>. We know that the <code>string &quot; (no branch)&quot;</code> parser expects and consumes the string <code>&quot; (no branch)&quot;</code>; wrapping it in a <code>try</code> allows us to avoid a parse error while it is used in conjunction with <code>manyTill anyChar</code>, as more and more characters are consumed by repeated applications of <code>anyChar</code> until we finally encounter the string <code>&quot; (no branch)&quot;</code>. Then the <code>manyTill anyChar (try (string &quot; (no branch)&quot;))</code> parser succeeds.</p>
<p>The <code>eof</code> parser then expects us to have reached the end of the input. Or in this case, the end of the first line of the output of <code>git status --porcelain --branch</code>. If everything goes well, a <code>Parser Nothing</code> is returned.</p>
<p>To put this in simpler terms, <code>noBranch</code> is expecting a single line that looks like <code>abcdefgh ijklm nopqrs (no branch)</code>. Notice how the list of characters accumulated by <code>manyTill anyChar</code> are discarded.</p>
<p>We can probably guess that <code>noBranch</code> is meant for parsing a branch line for a git repo that isn’t on a branch. This happens in the detached HEAD state. To see what the line looks like, simply go to any of your git repos with at least 2 commits, make sure you have committed / stashed all your changes, then run the following commands:</p>
<div class="highlight"><pre><span></span>git checkout -b HEAD~
git status --porcelain --branch
</pre></div>

<p>The first line should look similar to the following:</p>
<div class="highlight"><pre><span></span>## HEAD (no branch)
</pre></div>

<p>and this will be happily parsed by <code>branchParser'</code> first with <code>string &quot;## &quot;</code> followed by <code>branchParser</code> using the <code>try noBranch</code> parser, returning a <code>Parser Nothing</code>. So now we know that if <code>branchParser'</code> returns a <code>Parser Nothing</code>, then the git repo is in the detached HEAD state. Nice.</p>
<h3 id="the-newrepo-parser">The <code>newRepo</code> parser</h3>
<p>The <code>try newRepo</code> parser will be used by <code>branchParser</code> if parsing using <code>try noBranch</code> fails.</p>
<div class="highlight"><pre><span></span><span class="nf">branchParser</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser</span> <span class="ow">=</span>
      <span class="n">try</span> <span class="n">noBranch</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">newRepo</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemoteTracking</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemote</span>
    <span class="o">&lt;|&gt;</span> <span class="n">branchOnly</span>
</pre></div>

<p><a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L65">Its definition</a> is as follows:</p>
<div class="highlight"><pre><span></span><span class="nf">newRepo</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">newRepo</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">string</span> <span class="s">&quot;Initial commit on &quot;</span>
    <span class="n">branchOnly</span>
</pre></div>

<p>Based on the <code>string &quot;Initial commit on &quot;</code> parser alone, we can safely assume that this is for a new git repo. By now, we are quite familiar with what <code>string</code> does, so let’s look at the <code>branchOnly</code> parser, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L106">defined here</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchOnly</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchOnly</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">branch</span> <span class="ow">&lt;-</span> <span class="n">many</span> <span class="p">(</span><span class="n">noneOf</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">eof</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">branch</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>Documentation for the <code>noneOf</code> parser combinator:</p>
<div class="highlight"><pre><span></span><span class="nf">noneOf</span> <span class="ow">::</span> <span class="kt">Stream</span> <span class="n">s</span> <span class="n">m</span> <span class="kt">Char</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="kt">Char</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="kt">Char</span>
<span class="c1">-- As the dual of oneOf, noneOf cs succeeds if the current is character not in</span>
<span class="c1">-- the supplied list of characters cs. Returns the parsed character.</span>

<span class="c1">-- Example code:</span>
    <span class="n">consonant</span> <span class="ow">=</span> <span class="n">noneOf</span> <span class="s">&quot;aeiou&quot;</span>
</pre></div>

<p>When used with <code>many</code>, this will consume as many characters as possible, as long as they are not the space character, and return the list of characters consumed. Notice that this time, the author binds the list of characters consumed by <code>many (noneOf &quot; &quot;)</code> to <code>branch</code>. Immediately following that, an <code>eof</code> is expected. Therefore, <code>branchOnly</code> expects the input to consist of only non space characters.</p>
<p>I was expecting <code>newRepo</code> to handle the first line of <code>git status --porcelain --branch</code> for new git repositories but that was not the case. On git 2.15.0 for a new repo initialized using <code>git init</code> but with zero commits, I am getting the following output:</p>
<div class="highlight"><pre><span></span>## No commits yet on master
</pre></div>

<p>That is in the Porcelain v1 output format, which zsh-git-prompt expects. Porcelain v2 is in a different format and is not supported by zsh-git-prompt. I do not see anything on my zsh prompt that indicates this new directory I ran <code>git init</code> in is a git repo. Since this doesn’t work for a git repo that was just created using <code>git init</code> and has zero commits, I added the initial commit and ran <code>git status --porcelain --branch</code> again and… it wasn’t what we are expecting but is instead <code>## master</code>. Changing the commit message to <code>Initial commit</code> and similar does not change anything too.</p>
<p>The only explanation I can come up with is this: perhaps the <code>git status</code> Porcelain format changed since the last version of zsh-git-prompt? After all, at this time of writing, the most recent commit was on 15 Feb 2016 and for v0.5, which is what we are studying right now.</p>
<p>Regardless, let’s go back to <code>branchOnly</code> and go through the final 2 lines:</p>
<div class="highlight"><pre><span></span>    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">branch</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p><code>MkBranch</code> is a newtype wrapper <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L38">defined at line 38 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">newtype</span> <span class="kt">Branch</span> <span class="ow">=</span> <span class="kt">MkBranch</span> <span class="kt">String</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">)</span>
</pre></div>

<p>while <code>MkBranchInfo</code> is a data constructor <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L61">defined at line 61 of the same file</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">data</span> <span class="kt">BranchInfo</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="kt">Branch</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Remote</span><span class="p">)</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</pre></div>

<p>We can see that <code>Branch</code> just wraps a <code>String</code> that is a git branch name. <code>BranchInfo</code> has the one <code>MkBranchInfo</code> data constructor which takes in 2 arguments: a <code>Branch</code> and a <code>Maybe Remote</code>. We shall not cover the <code>Remote</code> type for now. Essentially, this code:</p>
<div class="highlight"><pre><span></span>    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">branch</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>Creates a representation for a git branch with a <code>Nothing</code> for the <code>Maybe Remote</code> part, then returns a <code>Just BranchInfo</code> if the parsing succeeds.</p>
<p>Putting everything together:</p>
<div class="highlight"><pre><span></span><span class="nf">newRepo</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">newRepo</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">string</span> <span class="s">&quot;Initial commit on &quot;</span>
    <span class="n">branchOnly</span>

<span class="nf">branchOnly</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchOnly</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">branch</span> <span class="ow">&lt;-</span> <span class="n">many</span> <span class="p">(</span><span class="n">noneOf</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">eof</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">branch</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>We see that the <code>newRepo</code> parser expects a string similar to:</p>
<div class="highlight"><pre><span></span>Initial commit on some-branch-name
</pre></div>

<p>and on a successful parse, returns a <code>Just BranchInfo</code> which represents a git branch.</p>
<h3 id="the-branchremotetracking-parser">The <code>branchRemoteTracking</code> parser</h3>
<p>If both <code>try noBranch</code> and <code>try newRepo</code> fail, then <code>branchParser</code> tries the <code>try branchRemoteTracking</code> parser.</p>
<div class="highlight"><pre><span></span><span class="nf">branchParser</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser</span> <span class="ow">=</span>
      <span class="n">try</span> <span class="n">noBranch</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">newRepo</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemoteTracking</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemote</span>
    <span class="o">&lt;|&gt;</span> <span class="n">branchOnly</span>
</pre></div>

<p>The <code>branchRemoteTracking</code> parser is the most complicated of the bunch, at line 84 of <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L84">src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchRemoteTracking</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchRemoteTracking</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">branch</span> <span class="ow">&lt;-</span> <span class="n">trackedBranch</span>
    <span class="n">tracking</span> <span class="ow">&lt;-</span> <span class="n">many</span> <span class="p">(</span><span class="n">noneOf</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">char</span> <span class="sc">&#39; &#39;</span>
    <span class="n">behead</span> <span class="ow">&lt;-</span> <span class="n">inBrackets</span>
    <span class="kr">let</span> <span class="n">remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">tracking</span><span class="p">)</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">behead</span><span class="p">)</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="n">branch</span>  <span class="p">(</span><span class="kt">Just</span> <span class="n">remote</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>Definition of <code>trackedBranch</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">trackedBranch</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">Branch</span>
<span class="nf">trackedBranch</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- Parsec</span>
      <span class="n">b</span> <span class="ow">&lt;-</span> <span class="n">manyTill</span> <span class="n">anyChar</span> <span class="p">(</span><span class="n">try</span> <span class="p">(</span><span class="n">string</span> <span class="s">&quot;...&quot;</span><span class="p">))</span>
      <span class="n">return</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">b</span><span class="p">)</span>
</pre></div>

<p>Our experience with Parsec tells us that <code>trackedBranch</code> will consume as many characters as possible until it hits the string <code>...</code>. The list of characters consumed is bound to <code>b</code> and then wrapped in the <code>MkBranch</code> newtype wrapper and returned.</p>
<p>Following that (still in <code>branchRemoteTracking</code>), <code>tracking &lt;- many (noneOf &quot; &quot;)</code> will consume as many characters as possible until it hits the space character. The list of characters consumed is bound to <code>tracking</code>. Subsequently, <code>char ' '</code> expects a single space character and consumes and discards it.</p>
<p><code>inBrackets</code> is defined as follows, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L128">on line 128</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">inBrackets</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">Distance</span>
<span class="nf">inBrackets</span> <span class="ow">=</span> <span class="n">between</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">behind</span> <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">aheadBehind</span> <span class="o">&lt;|&gt;</span> <span class="n">ahead</span><span class="p">)</span>
</pre></div>

<p>The <code>Distance</code> type constructor is defined at <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L21">line 21</a>, but I will be showing the comments from <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L11">lines 11 to 19</a> as well because they pretty much describe what we will be covering next:</p>
<div class="highlight"><pre><span></span><span class="cm">{-</span>
<span class="cm"> The idea is to parse the first line of the git status command.</span>
<span class="cm"> Such a line may look like:</span>
<span class="cm">  ## master</span>
<span class="cm">or</span>
<span class="cm">  ## master...origin/master</span>
<span class="cm">or</span>
<span class="cm">  ## master...origin/master [ahead 3, behind 4]</span>
<span class="cm"> -}</span>

<span class="kr">data</span> <span class="kt">Distance</span> <span class="ow">=</span> <span class="kt">Ahead</span> <span class="kt">Int</span> <span class="o">|</span> <span class="kt">Behind</span> <span class="kt">Int</span> <span class="o">|</span> <span class="kt">AheadBehind</span> <span class="kt">Int</span> <span class="kt">Int</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">)</span>
</pre></div>

<p>So <code>Distance</code> represents how many commits the current branch is ahead and/or behind its remote tracking branch; its data constructors are all aptly named.</p>
<p>Going back to <code>inBrackets</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">inBrackets</span> <span class="ow">=</span> <span class="n">between</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">behind</span> <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">aheadBehind</span> <span class="o">&lt;|&gt;</span> <span class="n">ahead</span><span class="p">)</span>
</pre></div>

<p><code>between</code> is a function defined in the Parsec library. Documentation as follows:</p>
<div class="highlight"><pre><span></span><span class="nf">between</span> <span class="ow">::</span> <span class="kt">Stream</span> <span class="n">s</span> <span class="n">m</span> <span class="n">t</span> <span class="ow">=&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">open</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">close</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span>
<span class="c1">-- between open close p parses open, followed by p and close. Returns the value returned by p.</span>
</pre></div>

<p>So essentially, <code>inBrackets</code> expects some string that satisfies one of <code>behind</code>, <code>try aheadBehind</code> or <code>ahead</code> in between a <code>[</code> and <code>]</code>. There is a subtlety with the use of <code>try</code> in <code>try aheadBehind</code> that we will explain later. Now, let’s talk a look at <code>behind</code>, <code>aheadBehind</code> and <code>ahead</code>.</p>
<p><code>behind</code> is defined at <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L140">line 140 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">behind</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">Distance</span>
<span class="nf">behind</span> <span class="ow">=</span> <span class="n">makeAheadBehind</span> <span class="s">&quot;behind&quot;</span> <span class="kt">Behind</span>
</pre></div>

<p>Recall that <code>Behind</code> is one of the data constrcutors of <code>Distance</code>. <code>makeAheadBehind</code> is defined at <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L131">line 131 of the same file</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">makeAheadBehind</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Distance</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Parser</span> <span class="kt">Distance</span>
<span class="nf">makeAheadBehind</span> <span class="n">name</span> <span class="n">constructor</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">string</span> <span class="p">(</span><span class="n">name</span> <span class="o">++</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">dist</span> <span class="ow">&lt;-</span> <span class="n">many1</span> <span class="n">digit</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">constructor</span> <span class="p">(</span><span class="n">read</span> <span class="n">dist</span><span class="p">))</span>
</pre></div>

<p>Documentation for <code>many1</code> and <code>digit</code>, both in the Parsec library:</p>
<div class="highlight"><pre><span></span><span class="nf">many1</span> <span class="ow">::</span> <span class="kt">Stream</span> <span class="n">s</span> <span class="n">m</span> <span class="n">t</span> <span class="ow">=&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
<span class="c1">-- many1 p applies the parser p one or more times. Returns a list of the</span>
<span class="c1">-- returned values of p.</span>

<span class="nf">digit</span> <span class="ow">::</span> <span class="kt">Stream</span> <span class="n">s</span> <span class="n">m</span> <span class="kt">Char</span> <span class="ow">=&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="kt">Char</span>
<span class="c1">-- Parses a digit. Returns the parsed character.</span>
</pre></div>

<p>We see that <code>behind = makeAheadBehind &quot;behind&quot; Behind</code>. This will first consume the string <code>&quot;behind &quot;</code> (and discard it), then consume 1 or more digits and bind the list of digits to <code>dist</code>. Since <code>constructor</code> has type <code>Int -&gt; Distance</code>, <code>read dist</code> will convert the list of digits into an <code>Int</code>, then pass it to <code>constructor</code> to create a <code>Distance</code>. In this case, the <code>constructor</code> is the <code>Behind</code> data constructor, which takes in 1 <code>Int</code> and creates a <code>Distance</code>.</p>
<p>The <code>behind</code> parser wants to parse a string similar to <code>behind 5</code> and returns a <code>Behind n</code>. <code>inBrackets</code> can therefore consume a string similar to <code>[behind 5]</code>.</p>
<div class="highlight"><pre><span></span><span class="nf">inBrackets</span> <span class="ow">=</span> <span class="n">between</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">behind</span> <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">aheadBehind</span> <span class="o">&lt;|&gt;</span> <span class="n">ahead</span><span class="p">)</span>
</pre></div>

<p>The other possibility that <code>inBrackets</code> can go down is <code>try aheadBehind</code>. Let’s look at the <code>aheadBehind</code> parser, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L142">defined at line 142 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">aheadBehind</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">Distance</span>
<span class="nf">aheadBehind</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="kt">Ahead</span> <span class="n">aheadBy</span> <span class="ow">&lt;-</span> <span class="n">ahead</span>
    <span class="n">string</span> <span class="s">&quot;, &quot;</span>
    <span class="kt">Behind</span> <span class="n">behindBy</span> <span class="ow">&lt;-</span> <span class="n">behind</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">AheadBehind</span> <span class="n">aheadBy</span> <span class="n">behindBy</span><span class="p">)</span>
</pre></div>

<p><code>ahead</code> is defined at <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L138">line 138 of the same file</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">ahead</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">Distance</span>
<span class="nf">ahead</span> <span class="ow">=</span> <span class="n">makeAheadBehind</span> <span class="s">&quot;ahead&quot;</span> <span class="kt">Ahead</span>
</pre></div>

<p><code>aheadBehind</code> will first call <code>ahead</code>, which calls <code>makeAheadBehind</code>, which consumes the string <code>&quot;ahead &quot;</code> (and discard it), then consume 1 or more digits and creates an <code>Ahead Int</code>. The <code>string &quot;, &quot;</code> will consume the string <code>&quot;, &quot;</code>. Next, <code>behind</code> springs into action (we covered that above) and consumes <code>&quot;behind &quot;</code> followed by 1 or more digits. Note that pattern matching is done to get the <code>Int</code> in the <code>Behind</code> so that the <code>Int</code> is bound to <code>behindBy</code>. Finally, an <code>AheadBehind Int Int</code> is created. All in all, <code>inBrackets</code> that goes down the route of <code>aheadBehind</code> consumes a string similar to the following:</p>
<div class="highlight"><pre><span></span>[ahead 13, behind 7]
</pre></div>

<p>Returning to <code>inBrackets</code> once again:</p>
<div class="highlight"><pre><span></span><span class="nf">inBrackets</span> <span class="ow">=</span> <span class="n">between</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">char</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">(</span><span class="n">behind</span> <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">aheadBehind</span> <span class="o">&lt;|&gt;</span> <span class="n">ahead</span><span class="p">)</span>
</pre></div>

<p>We see that the final possible branch is <code>ahead</code>. We have already covered this while going through <code>aheadBehind</code>. For completeness, if <code>inBrackets</code> goes down the route of <code>ahead</code>, a string similar to <code>[ahead 10]</code> is desired.</p>
<p>Earlier, we mentioned a subtlety in the use of <code>try</code> in <code>try aheadBehind</code> for the <code>inBrackets</code> parser. One might ask, why only wrap <code>aheadBehind</code> in a <code>try</code>? Why not wrap <code>behind</code> and <code>ahead</code> in <code>try</code> as well?</p>
<p>We do not have to wrap the <code>behind</code> parser in a <code>try</code>, because it uses the <code>string &quot;behind &quot;</code> parser to consume the string <code>&quot;behind &quot;</code>. Notice that the string <code>&quot;behind &quot;</code> and the string <code>&quot;ahead &quot;</code> differ in the first character (<code>b</code> vs. <code>a</code>) - this causes the <code>behind</code> parser to fail immediately <strong>without consuming any input</strong>. Since it does not consume any input, the <code>&lt;|&gt;</code> ensures that it will go on to try the next parser in <code>try aheadBehind</code>.</p>
<p>We see this fine print in the documentation for <code>(&lt;|&gt;)</code>:</p>
<div class="highlight"><pre><span></span><span class="p">(</span><span class="o">&lt;|&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">ParsecT</span> <span class="n">s</span> <span class="n">u</span> <span class="n">m</span> <span class="n">a</span>
<span class="c1">-- This combinator implements choice. The parser p &lt;|&gt; q first applies p. If it</span>
<span class="c1">-- succeeds, the value of p is returned. If p fails without consuming any input,</span>
<span class="c1">-- parser q is tried. This combinator is defined equal to the mplus member of</span>
<span class="c1">-- the MonadPlus class and the (&lt;|&gt;) member of Alternative.</span>
</pre></div>

<p>Specifically, the part that says <code>If p fails without consuming any input, parser q is tried.</code></p>
<p>There is overlap between strings that <code>aheadBehind</code> and <code>ahead</code> parse. <code>aheadBehind</code> expects strings of the form <code>ahead M, behind N</code>, while <code>ahead</code> expects a string similar to <code>ahead M</code>, with <code>M</code> and <code>N</code> being non negative integers. If we were to rearrange things and use <code>behind &lt;|&gt; ahead &lt;|&gt; try aheadBehind</code>, then for the input string <code>ahead 7, behind 9</code>, the <code>behind</code> parser will fail without consuming any input, then <code>&lt;|&gt;</code> will use the <code>ahead</code> parser to consume the string <code>&quot;ahead 7&quot;</code> and stop there. The <code>(behind &lt;|&gt; ahead &lt;|&gt; try aheadBehind)</code> parser succeeds, but <code>between (char '[') (char ']') (behind &lt;|&gt; try aheadBehind &lt;|&gt; ahead)</code> will fail because the next character is not a <code>]</code> but a <code>,</code>. Hence, <code>aheadBehind</code> must be attempted before <code>ahead</code>.</p>
<p>So we have established that <code>aheadBehind</code> must be attempted before <code>ahead</code>. Minimally, we have to use <code>behind &lt;|&gt; aheadBehind &lt;|&gt; ahead</code>. Now for the <code>try</code>. What happens if <code>behind &lt;|&gt; aheadBehind &lt;|&gt; ahead</code> parses the string <code>&quot;ahead 5&quot;</code> (which is valid for a git branch that is only ahead but not behind its remote tracking branch)? The <code>behind</code> parser fails without consuming any input, so <code>&lt;|&gt;</code> tries <code>aheadBehind</code>, which consumes the entire <code>&quot;ahead 5&quot;</code> but then that expects a <code>&quot;, &quot;</code>, so parsing fails. Because input was consumed, the next <code>&lt;|&gt;</code> does not try the <code>ahead</code> parser. Hence we need to wrap <code>aheadBehind</code> in a <code>try</code> so it will not consume any input on parse failure and chaining it with <code>&lt;|&gt; ahead</code> will move on to try the <code>ahead</code> parser.</p>
<p>Now that we know what the <code>inBrackets</code> parser does, we go back to what brought us here in the first place, <code>branchRemoteTracking</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchRemoteTracking</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchRemoteTracking</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">branch</span> <span class="ow">&lt;-</span> <span class="n">trackedBranch</span>
    <span class="n">tracking</span> <span class="ow">&lt;-</span> <span class="n">many</span> <span class="p">(</span><span class="n">noneOf</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">char</span> <span class="sc">&#39; &#39;</span>
    <span class="n">behead</span> <span class="ow">&lt;-</span> <span class="n">inBrackets</span>
    <span class="kr">let</span> <span class="n">remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">tracking</span><span class="p">)</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">behead</span><span class="p">)</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="n">branch</span>  <span class="p">(</span><span class="kt">Just</span> <span class="n">remote</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>Because <code>inBrackets</code> took a while to explain, if necessary, you might want to read what we previously covered for <code>branchRemoteTracking</code> to refresh your knowledge before carrying on.</p>
<p>To understand the data structures involved, we have to know what we are trying to do here. <code>branchRemoteTracking</code> is trying to parse a string where the current git branch that has a remote tracking branch and falls under one of the 3 cases:</p>
<ol style="list-style-type: decimal">
<li>it is some commits ahead of its remote tracking branch</li>
<li>it is some commits behind its remote tracking branch</li>
<li>it is some commits ahead AND some commits behind its remote tracking branch</li>
</ol>
<p>An example of a string that satisfies case 3 is:</p>
<div class="highlight"><pre><span></span>master...origin/feat [ahead 5, behind 3]
</pre></div>

<p>Armed with this information, we know that</p>
<div class="highlight"><pre><span></span>    <span class="kr">let</span> <span class="n">remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">tracking</span><span class="p">)</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">behead</span><span class="p">)</span>
</pre></div>

<p>Captures the information about the remote tracking branch in <code>MkBranch tracking</code> and the number of commits the current branch is ahead and/or behind the remote tracking branch in <code>Just behead</code>.</p>
<p>The <code>Remote</code> type constructor and the <code>MkRemote</code> data constructor are <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L56">defined at line 56 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">data</span> <span class="kt">Remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="kt">Branch</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Distance</span><span class="p">)</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</pre></div>

<p>There is only 1 data constructor, <code>MkRemote</code>. We see that a remote represents a remote tracking branch (the <code>Branch</code> parameter) and the number of commits the current branch is ahead and/or behind this remote tracking branch (the <code>Maybe Distance</code> parameter). It is possible that the current branch and its remote tracking branch are in sync and <code>Maybe Distance</code> allows us to use <code>Nothing</code> to represent that.</p>
<p>The remaining lines in <code>branchRemoteTracking</code>:</p>
<div class="highlight"><pre><span></span>    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="n">branch</span>  <span class="p">(</span><span class="kt">Just</span> <span class="n">remote</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>creates a <code>BranchInfo</code> object using its single data constructor <code>MkBranchInfo</code>, passing in the current branch (in <code>branch</code>) and information about the remote tracking branch (in <code>Just remote</code>). Then it wraps the <code>BranchInfo</code> inside a <code>Just</code> and uses <code>return</code> on it.</p>
<p>Here’s the definition for the <code>BranchInfo</code> type constructor:</p>
<div class="highlight"><pre><span></span><span class="kr">data</span> <span class="kt">BranchInfo</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="kt">Branch</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Remote</span><span class="p">)</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</pre></div>

<p>Earlier when we covered the <code>branchOnly</code> parser, we mentioned we will explain the <code>Maybe Remote</code> part in <code>MkBranchInfo</code>. See how <code>branchOnly</code> also uses <code>MkBranchInfo</code> but passes in a <code>Nothing</code> for the <code>Maybe Remote</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchOnly</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchOnly</span> <span class="ow">=</span>
    <span class="c1">-- omitted</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">branch</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="c1">-- omitted</span>
</pre></div>

<p>The <code>Nothing</code> indicates that there is no remote tracking branch for the current branch.</p>
<p>To summarize, the <code>branchRemoteTracking</code> parser wants to consume a string similar to one of the three variants below:</p>
<div class="highlight"><pre><span></span>master...origin/feat [ahead 7]
bourbon...origin/rice-noodles [ahead 10, behind 4]
fix-a-pesky-bug...workplace/nice-feature-work [behind 2]
</pre></div>

<p>In other words, a branch that has a remote tracking branch and is some commits ahead and/or behind that remote tracking branch.</p>
<h3 id="the-branchremote-parser">The <code>branchRemote</code> parser</h3>
<p>In the event that <code>try noBranch</code>, <code>try newRepo</code> and <code>try branchRemoteTracking</code> all fail, <code>branchParser</code> attempts the <code>try branchRemote</code> parser.</p>
<div class="highlight"><pre><span></span><span class="nf">branchParser</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser</span> <span class="ow">=</span>
      <span class="n">try</span> <span class="n">noBranch</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">newRepo</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemoteTracking</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemote</span>
    <span class="o">&lt;|&gt;</span> <span class="n">branchOnly</span>
</pre></div>

<p>The <code>branchRemote</code> parser is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L96">defined at line 96 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchRemote</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchRemote</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">branch</span> <span class="ow">&lt;-</span> <span class="n">trackedBranch</span>
    <span class="n">tracking</span> <span class="ow">&lt;-</span> <span class="n">many</span> <span class="p">(</span><span class="n">noneOf</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">eof</span>
    <span class="kr">let</span> <span class="n">remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">tracking</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="n">branch</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">remote</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>Its definition is eerily similar to that of <code>branchRemoteTracking</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchRemoteTracking</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchRemoteTracking</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">branch</span> <span class="ow">&lt;-</span> <span class="n">trackedBranch</span>
    <span class="n">tracking</span> <span class="ow">&lt;-</span> <span class="n">many</span> <span class="p">(</span><span class="n">noneOf</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">char</span> <span class="sc">&#39; &#39;</span>
    <span class="n">behead</span> <span class="ow">&lt;-</span> <span class="n">inBrackets</span>
    <span class="kr">let</span> <span class="n">remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">tracking</span><span class="p">)</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">behead</span><span class="p">)</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="n">branch</span>  <span class="p">(</span><span class="kt">Just</span> <span class="n">remote</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>Except that in terms of parsers, these 2 are not there:</p>
<div class="highlight"><pre><span></span>    <span class="n">char</span> <span class="sc">&#39; &#39;</span>
    <span class="n">behead</span> <span class="ow">&lt;-</span> <span class="n">inBrackets</span>
</pre></div>

<p>but are instead replaced by the <code>eof</code> parser, which expects there to be no more input.</p>
<p>With what we have covered for <code>branchRemoteTracking</code>, it should not be difficult to see that <code>branchRemote</code> expects a string similar to:</p>
<div class="highlight"><pre><span></span>refactoring...origin/refactoring
</pre></div>

<p>which is a git branch that has a remote tracking branch and is perfectly in sync with it. From</p>
<div class="highlight"><pre><span></span>    <span class="kr">let</span> <span class="n">remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">tracking</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="n">branch</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">remote</span><span class="p">)</span>
</pre></div>

<p>we see that the 2nd argument to <code>MkRemote</code> is a <code>Nothing</code>, which indicates that the git branch and its remote tracking branch are perfectly in sync.</p>
<p>Due to the overlap between the strings that <code>branchRemoteTracking</code> and <code>branchRemote</code> parsers consume, specifically, that <code>branchRemoteTracking</code> will consume what <code>branchRemote</code> consumes and more, therefore, <code>try branchRemoteTracking</code> has to be attempted before <code>try branchRemote</code>.</p>
<h3 id="the-branchonly-parser">The <code>branchOnly</code> parser</h3>
<p>The final parser the <code>branchParser</code> will use, when all else fails, is the <code>branchOnly</code> parser:</p>
<div class="highlight"><pre><span></span><span class="nf">branchParser</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser</span> <span class="ow">=</span>
      <span class="n">try</span> <span class="n">noBranch</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">newRepo</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemoteTracking</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemote</span>
    <span class="o">&lt;|&gt;</span> <span class="n">branchOnly</span>
</pre></div>

<p>Notice that it is not wrapped in a <code>try</code>, because this is the final parser in the chain and we do not need to care about whether input is consumed upon failure and we can just let it fail.</p>
<p><code>branchOnly</code> is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L106">defined at line 106 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchOnly</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchOnly</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">branch</span> <span class="ow">&lt;-</span> <span class="n">many</span> <span class="p">(</span><span class="n">noneOf</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">eof</span>
    <span class="kr">let</span> <span class="n">bi</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">branch</span><span class="p">)</span> <span class="kt">Nothing</span>
    <span class="n">return</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>We have covered it when we went through the <code>newRepo</code> parser, so we shall not cover it here again. In short, <code>branchOnly</code> consumes a string containing just a branch name and has no remote tracking branch. To see this in an actual git repo, simply do a <code>git checkout -b some-crazy-weird-branch-name</code> and run <code>git status --porcelain --branch</code>. This first line in the output will look similar to:</p>
<div class="highlight"><pre><span></span>## some-crazy-weird-branch-name
</pre></div>

<p>Because this overlaps with what the <code>try branchRemoteTracking</code> and <code>try branchRemote</code> parsers consume, we have to attempt those before the <code>branchOnly</code> parser.</p>
<p>With that, we have completed our coverage of <code>branchParser</code>.</p>
<h2 id="summary-of-branchparser">Summary of <code>branchParser'</code></h2>
<div class="highlight"><pre><span></span><span class="nf">branchParser&#39;</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser&#39;</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Parsec</span>
    <span class="n">string</span> <span class="s">&quot;## &quot;</span>
    <span class="n">branchParser</span>

<span class="nf">branchParser</span> <span class="ow">::</span> <span class="kt">Parser</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchParser</span> <span class="ow">=</span>
      <span class="n">try</span> <span class="n">noBranch</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">newRepo</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemoteTracking</span>
    <span class="o">&lt;|&gt;</span> <span class="n">try</span> <span class="n">branchRemote</span>
    <span class="o">&lt;|&gt;</span> <span class="n">branchOnly</span>
</pre></div>

<p>To summarize <code>branchParser'</code>, below, we give one example on each line for each of the parsers that <code>branchParser</code> can use:</p>
<div class="highlight"><pre><span></span>## HEAD (no branch)
## Initial commit on something-that-doesnt-seem-to-work-for-git-2-15-0
## localbranch...remote/remote-tracking-branch [ahead 5, behind 5]
## localbranch...remote-two/another-remote-tracking-branch
## just-a-local-branch
</pre></div>

<h2 id="going-back-to-the-caller-of-branchparser">Going back to the caller of <code>branchParser'</code></h2>
<p>Now that we are done with <code>branchParser</code> (and <code>branchParser'</code>), we go back to what led us down this path:</p>
<div class="highlight"><pre><span></span><span class="nf">branchInfo</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Either</span> <span class="kt">ParseError</span> <span class="kt">MBranchInfo</span>
<span class="nf">branchInfo</span> <span class="ow">=</span> <span class="n">parse</span> <span class="n">branchParser&#39;</span> <span class="s">&quot;&quot;</span>

<span class="nf">processBranch</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">MBranchInfo</span>
<span class="nf">processBranch</span> <span class="ow">=</span> <span class="n">rightOrNothing</span> <span class="o">.</span> <span class="n">branchInfo</span>
</pre></div>

<p>On parse success, <code>branchInfo</code> returns a <code>Right MBranchInfo</code>. On parse failure, <code>branchInfo</code> returns a <code>Left ParseError</code>. Its calling function <code>processBranch</code> uses <code>rightOrNothing</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L15">defined at line 15 of src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">rightOrNothing</span> <span class="ow">::</span> <span class="kt">Either</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="n">b</span>
<span class="nf">rightOrNothing</span> <span class="ow">=</span> <span class="n">either</span> <span class="p">(</span><span class="n">const</span> <span class="kt">Nothing</span><span class="p">)</span> <span class="kt">Just</span>
</pre></div>

<p>to convert a <code>Left ParseError</code> into a <code>Nothing</code>, and convert a <code>Right MBranchInfo</code> into a <code>Just MBranchInfo</code>. The <code>either</code> function is from the <code>Data.Either</code> module:</p>
<div class="highlight"><pre><span></span><span class="nf">either</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Either</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">c</span>
<span class="c1">-- Case analysis for the Either type. If the value is Left a, apply the first</span>
<span class="c1">-- function to a; if it is Right b, apply the second function to b.</span>
</pre></div>

<p>while the <code>const</code> function should be a familiar staple:</p>
<div class="highlight"><pre><span></span><span class="nf">const</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">a</span>
<span class="c1">-- const x is a unary function which evaluates to x for all inputs.</span>
<span class="c1">-- For instance,</span>
<span class="c1">-- &gt;&gt;&gt; map (const 42) [0..3]</span>
<span class="c1">-- [42, 42, 42, 42]</span>
</pre></div>

<p>Notice that <code>rightOrNothing</code> will discard the <code>ParseError</code> that is embedded in the <code>Left</code> on a parse failure. In other applications, the <code>ParseError</code> may be used to display a meaningful error message giving some hints as to why parsing failed. But in this case, we do not care for that.</p>
<p><code>processBranch</code> is invoked by <code>processGitStatus</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L21">defined at line 21 of src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">processGitStatus</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">GitInfo</span>
<span class="nf">processGitStatus</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
<span class="nf">processGitStatus</span> <span class="p">(</span><span class="n">branchLine</span><span class="kt">:</span><span class="n">statusLines</span><span class="p">)</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">mbranch</span> <span class="ow">&lt;-</span> <span class="n">processBranch</span> <span class="n">branchLine</span>
      <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">processStatus</span> <span class="n">statusLines</span>
      <span class="n">return</span> <span class="p">(</span><span class="kt">MkGitInfo</span> <span class="n">mbranch</span> <span class="n">status</span><span class="p">)</span>
</pre></div>

<p>On a successful parse of <code>branchLine</code> by <code>processBranch</code>, <code>mbranch</code> will be a <code>MBranchInfo</code>. Do note that we are in the <code>Maybe</code> monad. On an unsuccessful parse, <code>processBranch branchLine</code> will result in <code>Nothing</code> and the rest of the computations in <code>processGitStatus</code> will not be performed and a <code>Nothing</code> will be its return value.</p>
<p>We shall move on to <code>processStatus</code>, the next major piece of this program.</p>
<h2 id="the-processstatus-function">The <code>processStatus</code> function</h2>
<p><code>processStatus</code> is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L50">defined at line 50 of src/src/StatusParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">processStatus</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="kt">Status</span> <span class="kt">Int</span><span class="p">)</span>
<span class="nf">processStatus</span> <span class="n">statLines</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Maybe</span>
    <span class="n">statList</span> <span class="ow">&lt;-</span> <span class="n">for</span> <span class="n">statLines</span> <span class="n">extractMiniStatus</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">countStatus</span> <span class="n">statList</span><span class="p">)</span>
</pre></div>

<p>This function parses all the lines from 2nd line to the final line of the output of <code>git status --porcelain --branch</code>. The function <code>for</code> is defined in the <code>Data.Traversable</code> module:</p>
<div class="highlight"><pre><span></span><span class="nf">for</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Traversable</span> <span class="n">t</span><span class="p">,</span> <span class="kt">Applicative</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="n">t</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">)</span>
<span class="c1">-- for is traverse with its arguments flipped. For a version that ignores the</span>
<span class="c1">-- results see for_</span>

<span class="nf">traverse</span> <span class="ow">::</span> <span class="kt">Applicative</span> <span class="n">f</span> <span class="ow">=&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">t</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="n">t</span> <span class="n">b</span><span class="p">)</span>
<span class="c1">-- Map each element of a structure to an action, evaluate these actions from</span>
<span class="c1">-- left to right, and collect the results. For a version that ignores the</span>
<span class="c1">-- results see traverse_</span>
</pre></div>

<p><code>traverse</code> is part of the <code>Traversable</code> type class. We include it here because <code>for</code> is defined in terms of <code>traverse</code>.</p>
<p>When we fit <code>for statLines extractMiniStatus</code> to the type signature of <code>for</code>, we get:</p>
<div class="highlight"><pre><span></span><span class="nf">for</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Applicative</span> <span class="n">f</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">[]</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">String</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="kt">[]</span> <span class="n">b</span><span class="p">)</span>
</pre></div>

<p>The <code>Traversable</code> here is the <code>[]</code> constructor (not to be confused with the empty list). <code>extractMiniStatus</code> is the <code>String -&gt; f b</code> function. It is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L45">defined at line 45 of src/src/StatusParse.hs</a> and has the following type signature:</p>
<div class="highlight"><pre><span></span><span class="nf">extractMiniStatus</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">MiniStatus</span>
</pre></div>

<p><code>Maybe</code> is an Applicative, and we see that our <code>b</code> is <code>MiniStatus</code>. Using this new found information about the types, we have:</p>
<div class="highlight"><pre><span></span><span class="nf">for</span> <span class="ow">::</span> <span class="kt">[]</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">MiniStatus</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="kt">[]</span> <span class="kt">MiniStatus</span><span class="p">)</span>
</pre></div>

<p>Hence, <code>statList</code> in:</p>
<div class="highlight"><pre><span></span><span class="nf">statList</span> <span class="ow">&lt;-</span> <span class="n">for</span> <span class="n">statLines</span> <span class="n">extractMiniStatus</span>
</pre></div>

<p>has type <code>[MiniStatus]</code>.</p>
<p><code>MiniStatus</code> is a type constructor <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L14">defined at line 14 of the same file</a>. To better explain things, we include the comment above it as well:</p>
<div class="highlight"><pre><span></span><span class="cm">{- The two characters starting a git status line: -}</span>
<span class="kr">data</span> <span class="kt">MiniStatus</span> <span class="ow">=</span> <span class="kt">MkMiniStatus</span> <span class="kt">Char</span> <span class="kt">Char</span>
</pre></div>

<p>Here is the definition of <code>extractMiniStatus</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">extractMiniStatus</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">MiniStatus</span>
<span class="nf">extractMiniStatus</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
<span class="nf">extractMiniStatus</span> <span class="p">[</span><span class="kr">_</span><span class="p">]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
<span class="nf">extractMiniStatus</span> <span class="p">(</span><span class="n">index</span><span class="kt">:</span><span class="n">work</span><span class="kt">:</span><span class="kr">_</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="p">(</span><span class="kt">MkMiniStatus</span> <span class="n">index</span> <span class="n">work</span><span class="p">)</span>
</pre></div>

<p>We see that if a string has less than 2 characters, it returns a <code>Nothing</code>. Otherwise, it uses pattern matching to extract the first 2 characters and pass them to the <code>MkMiniStatus</code> data constructor. The author uses <code>index</code> and <code>work</code> for the name bindings for the first and second characters respectively, which is a hint that this has something to do with the git index and the work tree.</p>
<p>To understand the behavior of <code>for</code>, we look at <a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.Traversable.html#for">its definition</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">for</span> <span class="ow">=</span> <span class="n">flip</span> <span class="n">traverse</span>
</pre></div>

<p>It is as the documentation says. This is not very meaningful, so we have to look at the <a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.Traversable.html#line-235">definition of traverse for lists</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">instance</span> <span class="kt">Traversable</span> <span class="kt">[]</span> <span class="kr">where</span>
    <span class="cm">{-# INLINE traverse #-}</span> <span class="c1">-- so that traverse can fuse</span>
    <span class="n">traverse</span> <span class="n">f</span> <span class="ow">=</span> <span class="kt">List</span><span class="o">.</span><span class="n">foldr</span> <span class="n">cons_f</span> <span class="p">(</span><span class="n">pure</span> <span class="kt">[]</span><span class="p">)</span>
      <span class="kr">where</span> <span class="n">cons_f</span> <span class="n">x</span> <span class="n">ys</span> <span class="ow">=</span> <span class="n">liftA2</span> <span class="p">(</span><span class="kt">:</span><span class="p">)</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">)</span> <span class="n">ys</span>
</pre></div>

<p>In our case, <code>extractMiniStatus</code> is the <code>f</code>. Notice the <code>liftA2 (:) (f x) ys</code>. If <code>f x</code> returns a <code>Nothing</code> at some point, then we have:</p>
<div class="highlight"><pre><span></span><span class="nf">liftA2</span> <span class="p">(</span><span class="kt">:</span><span class="p">)</span> <span class="kt">Nothing</span> <span class="n">ys</span>
</pre></div>

<p>which should stay a <code>Nothing</code> for the remaining of the computation and there is no escape from it. But let us verify whether this is the case, by looking at <a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/src/GHC.Base.html#line-716">the definition of <code>liftA2</code> in the <code>Applicative</code> instance of <code>Maybe</code></a>:</p>
<div class="highlight"><pre><span></span><span class="kr">instance</span> <span class="kt">Applicative</span> <span class="kt">Maybe</span> <span class="kr">where</span>
    <span class="n">pure</span> <span class="ow">=</span> <span class="kt">Just</span>

    <span class="kt">Just</span> <span class="n">f</span>  <span class="o">&lt;*&gt;</span> <span class="n">m</span>       <span class="ow">=</span> <span class="n">fmap</span> <span class="n">f</span> <span class="n">m</span>
    <span class="kt">Nothing</span> <span class="o">&lt;*&gt;</span> <span class="n">_m</span>      <span class="ow">=</span> <span class="kt">Nothing</span>

    <span class="n">liftA2</span> <span class="n">f</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">liftA2</span> <span class="kr">_</span> <span class="kr">_</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">Nothing</span>

    <span class="kt">Just</span> <span class="n">_m1</span> <span class="o">*&gt;</span> <span class="n">m2</span>      <span class="ow">=</span> <span class="n">m2</span>
    <span class="kt">Nothing</span>  <span class="o">*&gt;</span> <span class="n">_m2</span>     <span class="ow">=</span> <span class="kt">Nothing</span>
</pre></div>

<p><code>liftA2 (:) Nothing ys</code> is covered by the case</p>
<div class="highlight"><pre><span></span>    <span class="n">liftA2</span> <span class="kr">_</span> <span class="kr">_</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</pre></div>

<p>Therefore, once we get a <code>Nothing</code> in <code>traverse</code>, this definition of <code>liftA2</code> ensures that we will always get a <code>Nothing</code>. Which means that <code>extractMiniStatus</code> is banking on its final pattern match:</p>
<div class="highlight"><pre><span></span><span class="nf">extractMiniStatus</span> <span class="p">(</span><span class="n">index</span><span class="kt">:</span><span class="n">work</span><span class="kt">:</span><span class="kr">_</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="p">(</span><span class="kt">MkMiniStatus</span> <span class="n">index</span> <span class="n">work</span><span class="p">)</span>
</pre></div>

<p>for any meaningful computation to be done. The other pattern matches (which return <code>Nothing</code>) all indicate failure.</p>
<p>If the 2nd till the final line of <code>git status --porcelain --branch</code> <strong>all</strong> pattern match against the final pattern match in <code>extractMiniStatus</code>, then <code>for statusList extractMiniStatus</code> returns a <code>Just [MiniStatus]</code>. If even one line doesn’t pattern match against the final pattern match, then <code>for statusList extractMiniStatus</code> returns a <code>Nothing</code>.</p>
<p>To understand what <code>extractMiniStatus</code> is pattern matching on, we quote some relevant documentation from the <a href="https://git-scm.com/docs/git-status/2.15.0#_short_format">short format section of the git status manpage for git 2.15.0</a>:</p>
<div class="highlight"><pre><span></span>In the short-format, the status of each path is shown as

    XY PATH1 -&gt; PATH2

where PATH1 is the path in the HEAD, and the &quot; -&gt; PATH 2&quot; part is shown only
when PATH1 corresponds to a different path in the index/worktree (i.e. the file
is renamed). The XY is a two-letter status code.

For paths with merge conflicts, X and Y show the modification states of each
side of the merge. For paths that do not have merge conflicts, X shows the
status of the index, and Y shows the status of the work tree. For untracked
paths, XY are ??. Other status codes can be interpreted as follows:

...omitted...
</pre></div>

<p>Indeed the first character of each line shows the state of the file in the index, while the second character shows the state of the file in the work tree. Notice how <code>extractMiniStatus</code> does not care about the rest of the characters on each line.</p>
<p>The final line of <code>processStatus</code>:</p>
<div class="highlight"><pre><span></span>    <span class="n">return</span> <span class="p">(</span><span class="n">countStatus</span> <span class="n">statList</span><span class="p">)</span>
</pre></div>

<p>calls the <code>countStatus</code> on the <code>[MiniStatus]</code> gathered, assuming all went well. If <code>for statusList extractMiniStatus</code> returns <code>Nothing</code>, then <code>processStatus</code> also returns a <code>Nothing</code>. Let us look at the <code>countStatus</code> function next.</p>
<h3 id="the-countstatus-function">The <code>countStatus</code> function</h3>
<p>The <code>countStatus</code> function is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L36">defined at line 36 of src/src/StatusParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">countStatus</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">MiniStatus</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Status</span> <span class="kt">Int</span>
<span class="nf">countStatus</span> <span class="n">l</span> <span class="ow">=</span> <span class="kt">MakeStatus</span>
  <span class="p">{</span>
  <span class="n">staged</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isStaged</span> <span class="n">l</span><span class="p">,</span>
  <span class="n">conflict</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isConflict</span> <span class="n">l</span><span class="p">,</span>
  <span class="n">changed</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isChanged</span> <span class="n">l</span><span class="p">,</span>
  <span class="n">untracked</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isUntracked</span> <span class="n">l</span>
  <span class="p">}</span>
</pre></div>

<p>It returns a <code>Status Int</code>. The <code>Status</code> type constructor is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L7">defined at line 7 of the same file</a>. But we include the comment at line 6 as well:</p>
<div class="highlight"><pre><span></span><span class="cm">{- Full status information -}</span>
<span class="kr">data</span> <span class="kt">Status</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">MakeStatus</span> <span class="p">{</span>
  <span class="n">staged</span> <span class="ow">::</span> <span class="n">a</span><span class="p">,</span>
  <span class="n">conflict</span> <span class="ow">::</span> <span class="n">a</span><span class="p">,</span>
  <span class="n">changed</span> <span class="ow">::</span> <span class="n">a</span><span class="p">,</span>
  <span class="n">untracked</span> <span class="ow">::</span> <span class="n">a</span><span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</pre></div>

<p>With <code>Status Int</code>, all the fields in <code>MakeStatus</code> will be <code>Int</code>. This seems to be used to count the number of files in the git repo that are not in a “clean” state.</p>
<p>We see that the <code>countStatus</code> function uses the <code>countByType</code> function to compute each of the fields in <code>MakeStatus</code>. The <code>countByType</code> function is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L33">defined at line 33 of the same file</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">countByType</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">MiniStatus</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">MiniStatus</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
<span class="nf">countByType</span> <span class="n">isType</span> <span class="ow">=</span> <span class="n">length</span> <span class="o">.</span> <span class="n">filter</span> <span class="n">isType</span>
</pre></div>

<p><code>countByType</code> counts the number of lines in the <code>[MiniStatus]</code> computed by <code>for statusList extractMiniStatus</code> that fulfil the <code>isType</code> predicate. Based on the usage of <code>countByType</code> that we see in the <code>MakeStatus</code> data constructor, the <code>isStaged</code>, <code>isConflict</code>, <code>isChanged</code> and <code>isUntracked</code> predicates are used as the <code>isType</code> argument to <code>countByType</code>. Let’s take a look at <code>isStaged</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L21">defined at line 21 of src/src/StatusParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">isStaged</span> <span class="ow">::</span> <span class="kt">MiniStatus</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
<span class="nf">isStaged</span> <span class="p">(</span><span class="kt">MkMiniStatus</span> <span class="n">index</span> <span class="n">work</span><span class="p">)</span> <span class="ow">=</span>
    <span class="p">(</span><span class="n">index</span> <span class="p">`</span><span class="n">elem</span><span class="p">`</span> <span class="s">&quot;MRC&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="sc">&#39;D&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">work</span> <span class="o">/=</span> <span class="sc">&#39;D&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">work</span> <span class="o">/=</span> <span class="sc">&#39;A&#39;</span><span class="p">)</span>
</pre></div>

<p>There are 3 distinct cases where <code>isStaged</code> returns <code>True</code>:</p>
<ol style="list-style-type: decimal">
<li>First character of a status line is one of <code>M</code>, <code>R</code>, <code>C</code></li>
<li>First character of a status line is <code>D</code> and the second character is not <code>D</code></li>
<li>First character of a status line is <code>A</code> and the second character is not <code>A</code></li>
</ol>
<p>The code is simple enough, but what exactly do these characters stand for? To find out, we consult the <a href="https://git-scm.com/docs/git-status/2.15.0#_short_format">documentation for the short-format of <code>git status</code></a>:</p>
<div class="highlight"><pre><span></span>In the short-format, the status of each path is shown as

    XY PATH1 -&gt; PATH2

where PATH1 is the path in the HEAD, and the &quot; -&gt; PATH 2&quot; part is shown only
when PATH1 corresponds to a different path in the index/worktree (i.e. the file
is renamed). The XY is a two-letter status code.

For paths with merge conflicts, X and Y show the modification states of each
side of the merge. For paths that do not have merge conflicts, X shows the
status of the index, and Y shows the status of the work tree. For untracked
paths, XY are ??. Other status codes can be interpreted as follows:

- &#39;&#39; = unmodified
- M = modified
- A = added
- D = deleted
- R = renamed
- C = copied
- U = updated but unmerged

Ignored files are not listed, unless --ignored option is in effect, in which
case XY are !!.

X          Y     Meaning
-------------------------------------------------
          [MD]   not updated
M        [ MD]   updated in index
A        [ MD]   added to index
D         [ M]   deleted from index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
-------------------------------------------------
D           D    unmerged, both deleted
A           U    unmerged, added by us
U           D    unmerged, deleted by them
U           A    unmerged, added by them
D           U    unmerged, deleted by us
A           A    unmerged, both added
U           U    unmerged, both modified
-------------------------------------------------
?           ?    untracked
!           !    ignored
-------------------------------------------------
</pre></div>

<p>The table on the codes for <code>X</code> and <code>Y</code> are very useful to us and allows us to show some of the cases covered by the <code>isStaged</code> function.</p>
<p><code>index `elem` &quot;MRC&quot;</code> covers these cases:</p>
<div class="highlight"><pre><span></span>M        [ MD]   updated in index
R        [ MD]   renamed in index
C        [ MD]   copied in index
[MARC]           index and work tree matches
</pre></div>

<p><code>(index == 'D' &amp;&amp; work /= 'D')</code> covers these cases:</p>
<div class="highlight"><pre><span></span>D         [ M]   deleted from index
D           U    unmerged, deleted by us
</pre></div>

<p>while <code>(index == 'A' &amp;&amp; work /= 'A')</code> covers these cases:</p>
<div class="highlight"><pre><span></span>A        [ MD]   added to index
[MARC]           index and work tree matches
[ MARC]     M    work tree changed since index
[ MARC]     D    deleted in work tree
A           U    unmerged, added by us
</pre></div>

<p>But based on first principles, <code>index `elem` &quot;MRC&quot;</code> covers the case where the file in the index has been modified, renamed, or copied, relative to HEAD. Starting from a clean repository, <code>M</code> can be achieved by making a change to a file tracked by git and then using <code>git add</code> on that file. <code>R</code> can be achieved by using <code>git mv</code>. I have no idea how we can get a <code>C</code> but I am guessing it might have something to do with one of <code>git rebase</code>, <code>git merge</code>, <code>git am</code> and similar.</p>
<p>One way to satisfy <code>(index == 'D' &amp;&amp; work /= 'D')</code> is to use <code>git rm</code> on a tracked file. To be precise, that shows a <code>&quot;D &quot;</code> for the first character and a space for the second character. If the table is exhaustive, it seems that we are ok with every entry that has a <code>D</code> in the first character, except for this one case:</p>
<div class="highlight"><pre><span></span>D           D    unmerged, both deleted
</pre></div>

<p>which seems that it will only arise during a git merge when there’s a merge conflict in another file that’s awaiting the user to resolve manually or a similar situation involving some merge conflict - this is just a guess and I am not certain if I am correct.</p>
<p>One way to satisfy <code>(index == 'A' &amp;&amp; work /= 'A')</code> is to <code>git add</code> a previously untracked file. That gives us a <code>&quot;A &quot;</code> to be precise. It seems that we are trying to avoid this case:</p>
<div class="highlight"><pre><span></span>A           A    unmerged, both added
</pre></div>

<p>which once again seems that it will only arise during a merge conflict pending human resolution.</p>
<p>Whether these cases covered by the <code>isStaged</code> function are exhaustive, they all indicate that the file has changed in the index, relative to HEAD, except for in the case of merge conflicts.</p>
<p>We shall do a quick walkthrough of <code>isConflict</code>, <code>isChanged</code> and <code>isUntracked</code>.</p>
<div class="highlight"><pre><span></span><span class="nf">isConflict</span> <span class="ow">::</span> <span class="kt">MiniStatus</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
<span class="nf">isConflict</span> <span class="p">(</span><span class="kt">MkMiniStatus</span> <span class="n">index</span> <span class="n">work</span><span class="p">)</span> <span class="ow">=</span>
    <span class="n">index</span> <span class="o">==</span> <span class="sc">&#39;U&#39;</span> <span class="o">||</span> <span class="n">work</span> <span class="o">==</span> <span class="sc">&#39;U&#39;</span> <span class="o">||</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">work</span> <span class="o">==</span> <span class="sc">&#39;A&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="sc">&#39;D&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">work</span> <span class="o">==</span> <span class="sc">&#39;D&#39;</span><span class="p">)</span>
</pre></div>

<p>As its name suggests, <code>isConflict</code> covers the case where a file has a merge conflict.</p>
<div class="highlight"><pre><span></span><span class="nf">isChanged</span> <span class="ow">::</span> <span class="kt">MiniStatus</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
<span class="nf">isChanged</span> <span class="p">(</span><span class="kt">MkMiniStatus</span> <span class="n">index</span> <span class="n">work</span><span class="p">)</span> <span class="ow">=</span>
    <span class="n">work</span> <span class="o">==</span> <span class="sc">&#39;M&#39;</span> <span class="o">||</span> <span class="p">(</span><span class="n">work</span> <span class="o">==</span> <span class="sc">&#39;D&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">/=</span> <span class="sc">&#39;D&#39;</span><span class="p">)</span>
</pre></div>

<p><code>isChanged</code> takes care of files which are modified in the work tree relative to HEAD (<code>work == 'M'</code>) and files deleted from the work tree but not deleted in the index (can be gotten by using <code>rm</code> to remove a tracked file).</p>
<div class="highlight"><pre><span></span><span class="nf">isUntracked</span> <span class="ow">::</span> <span class="kt">MiniStatus</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
<span class="nf">isUntracked</span> <span class="p">(</span><span class="kt">MkMiniStatus</span> <span class="n">index</span> <span class="kr">_</span><span class="p">)</span> <span class="ow">=</span>
    <span class="n">index</span> <span class="o">==</span> <span class="sc">&#39;?&#39;</span>
</pre></div>

<p>and finally, <code>isUntracked</code> takes care of files which are not tracked by git.</p>
<p>Returning to <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L50">processStatus</a> and <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/StatusParse.hs#L36">countStatus</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">processStatus</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="kt">Status</span> <span class="kt">Int</span><span class="p">)</span>
<span class="nf">processStatus</span> <span class="n">statLines</span> <span class="ow">=</span>
  <span class="kr">do</span> <span class="c1">-- Maybe</span>
    <span class="n">statList</span> <span class="ow">&lt;-</span> <span class="n">for</span> <span class="n">statLines</span> <span class="n">extractMiniStatus</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">countStatus</span> <span class="n">statList</span><span class="p">)</span>

<span class="nf">countStatus</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">MiniStatus</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Status</span> <span class="kt">Int</span>
<span class="nf">countStatus</span> <span class="n">l</span> <span class="ow">=</span> <span class="kt">MakeStatus</span>
  <span class="p">{</span>
  <span class="n">staged</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isStaged</span> <span class="n">l</span><span class="p">,</span>
  <span class="n">conflict</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isConflict</span> <span class="n">l</span><span class="p">,</span>
  <span class="n">changed</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isChanged</span> <span class="n">l</span><span class="p">,</span>
  <span class="n">untracked</span><span class="ow">=</span><span class="n">countByType</span> <span class="n">isUntracked</span> <span class="n">l</span>
  <span class="p">}</span>
</pre></div>

<p>we see that <code>for statLines extractMiniStatus</code> computes a list of <code>MkMiniStatus</code> from the output of <code>git status --porcelain --branch</code>. Then, <code>countStatus</code> is used to create a <code>Status</code> with 4 fields that counts the number of files which are modified in the index relative to the work tree (staged), in a merge conflict, modified in the work tree relative to HEAD (changed) and untracked. This <code>Status</code> is then wrapped in a <code>Just</code> and returned by <code>processStatus</code>.</p>
<p>In the event that some line in the output of <code>git status --porcelain --branch</code> has less than 2 characters, <code>for statLines extractMiniStatus</code> results in a <code>Nothing</code> and it is returned by <code>processStatus</code>, without running <code>return (countStats statList)</code>, because we are inside the <code>Maybe</code> monad.</p>
<p>That finishes our coverage of <code>processStatus</code>.</p>
<h2 id="going-back-to-processgitstatus">Going back to <code>processGitStatus</code></h2>
<div class="highlight"><pre><span></span><span class="nf">processGitStatus</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">GitInfo</span>
<span class="nf">processGitStatus</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">Nothing</span>
<span class="nf">processGitStatus</span> <span class="p">(</span><span class="n">branchLine</span><span class="kt">:</span><span class="n">statusLines</span><span class="p">)</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">mbranch</span> <span class="ow">&lt;-</span> <span class="n">processBranch</span> <span class="n">branchLine</span>
      <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">processStatus</span> <span class="n">statusLines</span>
      <span class="n">return</span> <span class="p">(</span><span class="kt">MkGitInfo</span> <span class="n">mbranch</span> <span class="n">status</span><span class="p">)</span>
</pre></div>

<p>In the final line, <code>MkGitInfo mbranch status</code> constructs a <code>GitInfo</code> (<a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L11">defined at line 11 of src/src/Utils.hs</a>):</p>
<div class="highlight"><pre><span></span><span class="kr">data</span> <span class="kt">GitInfo</span> <span class="ow">=</span> <span class="kt">MkGitInfo</span> <span class="kt">MBranchInfo</span> <span class="p">(</span><span class="kt">Status</span> <span class="kt">Int</span><span class="p">)</span>
</pre></div>

<p>which wraps over the <code>MBranchInfo</code> from <code>processBranch branchLine</code> and the <code>Status Int</code> from <code>processStatus statusLines</code>. Assuming everything went smoothly and both <code>processBranch</code> and <code>processStatus</code> returned <code>Just</code>s, the <code>GitInfo</code> itself will be wrapped inside <code>Just</code>. Otherwise, <code>processGitStatus</code> returns a <code>Nothing</code>.</p>
<p>The <code>GitInfo</code> value captures all the information obtained from the output of <code>git status --porcelain --branch</code>.</p>
<h2 id="going-back-to-stringsfromstatus">Going back to <code>stringsFromStatus</code></h2>
<div class="highlight"><pre><span></span><span class="nf">stringsFromStatus</span> <span class="ow">::</span> <span class="kt">Maybe</span> <span class="kt">Hash</span>
                  <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="c1">-- status</span>
                  <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">stringsFromStatus</span> <span class="n">h</span> <span class="n">status</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- List</span>
    <span class="n">processed</span> <span class="ow">&lt;-</span> <span class="n">processGitStatus</span> <span class="p">(</span><span class="n">lines</span> <span class="n">status</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">showGitInfo</span> <span class="n">h</span> <span class="n">processed</span><span class="p">)</span>
</pre></div>

<p><code>stringsFromStatus</code> lives inside the <code>Maybe</code> monad. <code>processGitStatus</code> returns either a <code>Just GitStatus</code> or a <code>Nothing</code>. If it is a <code>Nothing</code>, everything else is skipped and <code>stringsFromStatus</code> returns a <code>Nothing</code>. If it is a <code>Just GitStatus</code>, the <code>GitStatus</code> is bound to <code>processed</code>. That, along with <code>h</code>, is passed to <code>showGitInfo</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L57">defined at line 57 of src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">showGitInfo</span> <span class="ow">::</span> <span class="kt">Maybe</span> <span class="kt">Hash</span>
      <span class="ow">-&gt;</span> <span class="kt">GitInfo</span>
      <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">showGitInfo</span> <span class="n">mhash</span> <span class="p">(</span><span class="kt">MkGitInfo</span> <span class="n">bi</span> <span class="n">stat</span><span class="p">)</span> <span class="ow">=</span> <span class="n">branchInfoString</span> <span class="o">++</span> <span class="n">showStatusNumbers</span> <span class="n">stat</span>
  <span class="kr">where</span>
    <span class="n">branchInfoString</span> <span class="ow">=</span> <span class="n">showBranchInfo</span> <span class="p">(</span><span class="n">branchOrHashWith</span> <span class="sc">&#39;:&#39;</span> <span class="n">mhash</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>This pattern matches the <code>GitInfo</code> argument using its only <code>MkGitInfo</code> constructor and binds its 2 components to the names <code>bi</code> and <code>stat</code>.</p>
<p>Because the return type of <code>ShowGitInfo</code> is <code>[String]</code> and a <code>++</code> is used to concatenate <code>branchInfoString</code> and <code>showStatusNumbers stat</code>, this means that <code>branchInfoString</code> is a <code>[String]</code>.</p>
<p>Let’s look at the <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L50">definition of <code>branchOrHashWith</code>, along with its comment at line 50</a>:</p>
<div class="highlight"><pre><span></span><span class="cm">{- Combine status info, branch info and hash -}</span>

<span class="nf">branchOrHashWith</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Hash</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">BranchInfo</span> <span class="ow">-&gt;</span> <span class="kt">BranchInfo</span>
<span class="nf">branchOrHashWith</span> <span class="kr">_</span> <span class="kr">_</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">bi</span><span class="p">)</span> <span class="ow">=</span> <span class="n">bi</span>
<span class="nf">branchOrHashWith</span> <span class="n">c</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">hash</span><span class="p">)</span> <span class="kt">Nothing</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="p">(</span><span class="n">c</span> <span class="kt">:</span> <span class="n">getHash</span> <span class="n">hash</span><span class="p">))</span> <span class="kt">Nothing</span>
<span class="nf">branchOrHashWith</span> <span class="kr">_</span> <span class="kt">Nothing</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="kt">Nothing</span>
</pre></div>

<p>The first pattern match ignores the first 2 arguments and tries to pattern match against the <code>MBranchInfo</code> inside the <code>GitInfo</code>. Recall that this is the result of the <code>processBranch</code> function and captures all the important information about the current git branch. Also recall that <code>MBranchInfo</code> is a type synonym for <code>Maybe BranchInfo</code>. If this is a <code>Just</code>, then <code>branchOrHashWith</code> simply returns the <code>BranchInfo</code> value that’s wrapped inside the <code>Just</code>.</p>
<p>The second pattern match covers the case where the return value from <code>processBranch</code> is a <code>Nothing</code>. This happens when parsing the branch line fails and we have no information on the current git branch. The second argument passed to <code>branchOrHashWith</code> is originally from the <code>main</code> function:</p>
<div class="highlight"><pre><span></span><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
  <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">getContents</span>
    <span class="n">mhash</span> <span class="ow">&lt;-</span> <span class="n">unsafeInterleaveIO</span> <span class="n">gitrevparse</span> <span class="c1">-- defer the execution until we know we need the hash</span>
    <span class="c1">-- omitted</span>

<span class="nf">gitrevparse</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Hash</span><span class="p">)</span>
<span class="nf">gitrevparse</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
    <span class="n">mresult</span> <span class="ow">&lt;-</span> <span class="n">safeRun</span> <span class="s">&quot;git&quot;</span> <span class="p">[</span><span class="s">&quot;rev-parse&quot;</span><span class="p">,</span> <span class="s">&quot;--short&quot;</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">]</span>
    <span class="kr">let</span> <span class="n">rev</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">result</span> <span class="ow">&lt;-</span> <span class="n">mresult</span>
      <span class="n">return</span> <span class="p">(</span><span class="kt">MkHash</span> <span class="p">(</span><span class="n">init</span> <span class="n">result</span><span class="p">))</span>
    <span class="n">return</span> <span class="n">rev</span>
</pre></div>

<p>to be exact, it is the result of <code>unsafeInterleaveIO gitrevparse</code>, which is a deferred run of <code>git rev-parse --short HEAD</code>. This command shows the git commit SHA1 of the top most commit on the current git branch. We covered this early on and noted that the result of <code>unsafeInterleaveIO gitrevparse</code> will be a <code>Just Hash</code> if the <code>git rev-parse --short HEAD</code> runs successfully and a <code>Nothing</code> otherwise. So we finally see the purpose of this deferred computation: it allows us to obtain a git commit SHA1 as a fallback in the event that we cannot obtain any information about the git branch. The <code>unsafeInterleaveIO</code> will prevent it from running until it is actually needed.</p>
<p>Returning to the second pattern match of <code>branchOrHashWith</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchOrHashWith</span> <span class="n">c</span> <span class="p">(</span><span class="kt">Just</span> <span class="n">hash</span><span class="p">)</span> <span class="kt">Nothing</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="p">(</span><span class="n">c</span> <span class="kt">:</span> <span class="n">getHash</span> <span class="n">hash</span><span class="p">))</span> <span class="kt">Nothing</span>
</pre></div>

<p>The <code>(Just hash)</code> will only pattern match on a successful executation of <code>git rev-parse --short HEAD</code>. The <code>c</code> here is a colon character. The <code>getHash</code> function is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L9">defined at line 9 of src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">newtype</span> <span class="kt">Hash</span> <span class="ow">=</span> <span class="kt">MkHash</span> <span class="p">{</span><span class="n">getHash</span> <span class="ow">::</span> <span class="kt">String</span><span class="p">}</span>
</pre></div>

<p><code>getHash hash</code> extracts the <code>String</code> that is wrapped by the <code>MkHash</code> newtype constructor, which is used by the <code>gitrevparse</code> function to wrap around the git commit SHA1 (except for the newline character).</p>
<p>Overall, this second pattern match of <code>branchOrHashWith</code> returns a <code>BranchInfo</code> value whose <code>Branch</code> component is the git commit SHA1 prepended with a colon character, and whose <code>Maybe Remote</code> component is a <code>Nothing</code>.</p>
<p>The third and final pattern match of <code>branchOrHashWith</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">branchOrHashWith</span> <span class="kr">_</span> <span class="kt">Nothing</span> <span class="kr">_</span> <span class="ow">=</span> <span class="kt">MkBranchInfo</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="kt">Nothing</span>
</pre></div>

<p>covers the case where both parsing the branch line failed and the command <code>git rev-parse --short HEAD</code> failed. In this case, a <code>BranchInfo</code> object is created with the <code>Branch</code> component being a <code>MkBranch &quot;&quot;</code> and whose <code>Maybe Remote</code> component is a <code>Nothing</code>.</p>
<p>Going back to <code>showGitInfo</code>, we see that the <code>BranchInfo</code> returned by <code>branchOrHasWith</code> is passed to <code>showBranchInfo</code>.</p>
<div class="highlight"><pre><span></span>    <span class="n">branchInfoString</span> <span class="ow">=</span> <span class="n">showBranchInfo</span> <span class="p">(</span><span class="n">branchOrHashWith</span> <span class="sc">&#39;:&#39;</span> <span class="n">mhash</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>which is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L47">defined at line 47 of src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">showBranchInfo</span> <span class="ow">::</span> <span class="kt">BranchInfo</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">showBranchInfo</span> <span class="p">(</span><span class="kt">MkBranchInfo</span> <span class="n">branch</span> <span class="n">mremote</span><span class="p">)</span> <span class="ow">=</span> <span class="n">show</span> <span class="n">branch</span> <span class="kt">:</span> <span class="n">showRemoteNumbers</span> <span class="n">mremote</span>
</pre></div>

<p>This first runs <code>show branch</code> to convert the <code>Branch</code> value within <code>MkBranchInfo</code> into a <code>String</code>. The <code>Show</code> instance of <code>Branch</code> is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L40">defined at line 40 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="kr">instance</span> <span class="kt">Show</span> <span class="kt">Branch</span> <span class="kr">where</span>
    <span class="n">show</span> <span class="p">(</span><span class="kt">MkBranch</span> <span class="n">b</span><span class="p">)</span> <span class="ow">=</span> <span class="n">b</span>
</pre></div>

<p>Because <code>Branch</code> is just a newtype wrapper over <code>String</code>, this is essentially just returns the <code>String</code> that is being wrapped. The value of this <code>String</code> can be the current git branch name or if parsing the branch line fails, the current git commit SHA1 prepended by a colon, or if that fails, it will be the empty string.</p>
<p>This <code>String</code> is prepended to the <code>[String]</code> created by <code>showRemoteNumbers mremote</code>. The <code>showRemoteNumbers</code> function is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L35">defined at line 35 of src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">showRemoteNumbers</span> <span class="ow">::</span> <span class="kt">Maybe</span> <span class="kt">Remote</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">showRemoteNumbers</span> <span class="n">mremote</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- List</span>
      <span class="n">ab</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">ahead</span><span class="p">,</span> <span class="n">behind</span><span class="p">]</span>
      <span class="n">return</span> <span class="p">(</span><span class="n">show</span> <span class="n">ab</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="p">(</span><span class="n">ahead</span><span class="p">,</span> <span class="n">behind</span><span class="p">)</span> <span class="ow">=</span> <span class="n">fromMaybe</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="n">distance</span>  <span class="c1">-- the script needs some value, (0,0) means no display</span>
    <span class="n">distance</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">remote</span> <span class="ow">&lt;-</span> <span class="n">mremote</span>
      <span class="n">dist</span> <span class="ow">&lt;-</span> <span class="n">getDistance</span> <span class="n">remote</span>
      <span class="n">return</span> <span class="p">(</span><span class="n">pairFromDistance</span> <span class="n">dist</span><span class="p">)</span>
</pre></div>

<p>And it makes use of the list monad. The idea is simple. <code>ahead</code> and <code>behind</code> will each be bound to <code>ab</code> (one at a time) and then <code>show ab</code> converts it to a <code>String</code>, which will be in the resulting <code>[String]</code>. Hence the return value of <code>showRemoteNumbers</code> will always be a list of 2 strings.</p>
<p><code>ahead</code> and <code>behind</code> are defined in the <code>where</code> clause by <code>fromMaybe (0,0) distance</code>. The <code>fromMaybe</code> function is part of the <code>Data.Maybe</code> module. We covered it earlier but to refresh our memory, here is its documentation:</p>
<div class="highlight"><pre><span></span><span class="nf">fromMaybe</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
<span class="c1">-- The fromMaybe function takes a default value and a Maybe value. If the Maybe</span>
<span class="c1">-- is a Nothing, it returns the default values; otherwise, it returns the value</span>
<span class="c1">-- contained in the Maybe.</span>
</pre></div>

<p>If <code>distance</code> is a <code>Just _</code>, then we will be taking <code>(ahead, behind)</code> from inside it. Otherwise, <code>ahead</code> and <code>behind</code> will both be 0. <code>distance</code> is defined as follows:</p>
<div class="highlight"><pre><span></span>    <span class="n">distance</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">remote</span> <span class="ow">&lt;-</span> <span class="n">mremote</span>
      <span class="n">dist</span> <span class="ow">&lt;-</span> <span class="n">getDistance</span> <span class="n">remote</span>
      <span class="n">return</span> <span class="p">(</span><span class="n">pairFromDistance</span> <span class="n">dist</span><span class="p">)</span>
</pre></div>

<p>It lives in the <code>Maybe</code> monad. The <code>mremote</code> is the <code>Maybe Remote</code> part of the bigger <code>BranchInfo</code> value passed to <code>showBranchInfo</code>. If it is a <code>Nothing</code>, all bets are off and <code>fromMaybe (0,0) distance</code> will return <code>(0,0)</code>. This applies for the case where there is no information on the number of commits the current branch is ahead and/or behind its remote tracking branch, or perhaps the current branch does not have a remote tracking branch.</p>
<p>If there is a <code>Remote</code> value, it is bound to the name <code>remote</code> and passed to the <code>getDistance</code> function, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L58">defined at line 58 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">getDistance</span> <span class="ow">::</span> <span class="kt">Remote</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Distance</span>
<span class="nf">getDistance</span> <span class="p">(</span><span class="kt">MkRemote</span> <span class="kr">_</span> <span class="n">md</span><span class="p">)</span> <span class="ow">=</span> <span class="n">md</span>
</pre></div>

<p>Here is the definition of the <code>Remote</code> data type:</p>
<div class="highlight"><pre><span></span><span class="kr">data</span> <span class="kt">Remote</span> <span class="ow">=</span> <span class="kt">MkRemote</span> <span class="kt">Branch</span> <span class="p">(</span><span class="kt">Maybe</span> <span class="kt">Distance</span><span class="p">)</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</pre></div>

<p>so <code>getDistance</code> is essentially extracting the <code>Maybe Distance</code> part. This will only be a <code>Just</code> if parsing the branch line was successful and it is one of the following variants:</p>
<div class="highlight"><pre><span></span>## master...origin/feat [ahead 7]
## bourbon...origin/rice-noodles [ahead 10, behind 4]
## fix-a-pesky-bug...workplace/nice-feature-work [behind 2]
</pre></div>

<p>which will be parsed by the <code>branchParser'</code> parser using the <code>branchParser</code> parser which goes down the route of the <code>branchRemoteTracking</code> parser, all of which we covered earlier.</p>
<p>The <code>Distance</code> type is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L21">defined at line 21 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span>data Distance = Ahead Int | Behind Int | AheadBehind Int Int deriving (Eq)
</pre></div>

<p>If <code>getDistance</code> extracts a <code>Just Distance</code> value, the <code>Distance</code> value is bound to the name <code>dist</code>, which is then passed to the <code>pairFromDistance</code> function, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L153">defined at line 153 of src/src/BranchParse.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">pairFromDistance</span> <span class="ow">::</span> <span class="kt">Distance</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span>
<span class="nf">pairFromDistance</span> <span class="p">(</span><span class="kt">Ahead</span> <span class="n">n</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="nf">pairFromDistance</span> <span class="p">(</span><span class="kt">Behind</span> <span class="n">n</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="nf">pairFromDistance</span> <span class="p">(</span><span class="kt">AheadBehind</span> <span class="n">m</span> <span class="n">n</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
</pre></div>

<p>which covers all the different data constructors of <code>Distance</code>. It returns a 2 tuple, with each element being the number of commits the current branch is ahead or behind of its remote tracking branch, respectively.</p>
<div class="highlight"><pre><span></span><span class="nf">showRemoteNumbers</span> <span class="ow">::</span> <span class="kt">Maybe</span> <span class="kt">Remote</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">showRemoteNumbers</span> <span class="n">mremote</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- List</span>
      <span class="n">ab</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">ahead</span><span class="p">,</span> <span class="n">behind</span><span class="p">]</span>
      <span class="n">return</span> <span class="p">(</span><span class="n">show</span> <span class="n">ab</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="p">(</span><span class="n">ahead</span><span class="p">,</span> <span class="n">behind</span><span class="p">)</span> <span class="ow">=</span> <span class="n">fromMaybe</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="n">distance</span>  <span class="c1">-- the script needs some value, (0,0) means no display</span>
    <span class="n">distance</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
      <span class="n">remote</span> <span class="ow">&lt;-</span> <span class="n">mremote</span>
      <span class="n">dist</span> <span class="ow">&lt;-</span> <span class="n">getDistance</span> <span class="n">remote</span>
      <span class="n">return</span> <span class="p">(</span><span class="n">pairFromDistance</span> <span class="n">dist</span><span class="p">)</span>
</pre></div>

<p>With our newfound knowledge, what <code>showRemoteNumbers</code> does is pretty obvious. It returns a list of 2 strings indicating how many commits the current branch is ahead or behind its remote tracking branch respectively, if applicable. Otherwise, both elements will be <code>&quot;0&quot;</code>.</p>
<p>Backtracking to <code>showBranchInfo</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">showBranchInfo</span> <span class="p">(</span><span class="kt">MkBranchInfo</span> <span class="n">branch</span> <span class="n">mremote</span><span class="p">)</span> <span class="ow">=</span> <span class="n">show</span> <span class="n">branch</span> <span class="kt">:</span> <span class="n">showRemoteNumbers</span> <span class="n">mremote</span>
</pre></div>

<p>We see that it returns a list of 3 strings:</p>
<ul>
<li>the current git branch / SHA1 / the empty string</li>
<li>the number of commits the current git branch is ahead of its remote tracking branch</li>
<li>the number of commits the current git branch is behind its remote tracking branch</li>
</ul>
<p>And backtracking to <code>showGitInfo</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">showGitInfo</span> <span class="ow">::</span> <span class="kt">Maybe</span> <span class="kt">Hash</span>
      <span class="ow">-&gt;</span> <span class="kt">GitInfo</span>
      <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">showGitInfo</span> <span class="n">mhash</span> <span class="p">(</span><span class="kt">MkGitInfo</span> <span class="n">bi</span> <span class="n">stat</span><span class="p">)</span> <span class="ow">=</span> <span class="n">branchInfoString</span> <span class="o">++</span> <span class="n">showStatusNumbers</span> <span class="n">stat</span>
  <span class="kr">where</span>
    <span class="n">branchInfoString</span> <span class="ow">=</span> <span class="n">showBranchInfo</span> <span class="p">(</span><span class="n">branchOrHashWith</span> <span class="sc">&#39;:&#39;</span> <span class="n">mhash</span> <span class="n">bi</span><span class="p">)</span>
</pre></div>

<p>After having generated the list of 3 strings in <code>branchInfoString</code>, we concatenate it with the result of <code>showStatusNumbers stat</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/Utils.hs#L29">defined at line 29 of src/src/Utils.hs</a>:</p>
<div class="highlight"><pre><span></span><span class="nf">showStatusNumbers</span> <span class="ow">::</span> <span class="kt">Status</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">showStatusNumbers</span> <span class="p">(</span><span class="kt">MakeStatus</span> <span class="n">s</span> <span class="n">x</span> <span class="n">c</span> <span class="n">t</span><span class="p">)</span> <span class="ow">=</span>
    <span class="kr">do</span> <span class="c1">-- List</span>
      <span class="n">nb</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="n">s</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">t</span><span class="p">]</span>
      <span class="n">return</span> <span class="p">(</span><span class="n">show</span> <span class="n">nb</span><span class="p">)</span>
</pre></div>

<p>Looking at the definition of the <code>Status</code> data type:</p>
<div class="highlight"><pre><span></span><span class="cm">{- Full status information -}</span>
<span class="kr">data</span> <span class="kt">Status</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">MakeStatus</span> <span class="p">{</span>
  <span class="n">staged</span> <span class="ow">::</span> <span class="n">a</span><span class="p">,</span>
  <span class="n">conflict</span> <span class="ow">::</span> <span class="n">a</span><span class="p">,</span>
  <span class="n">changed</span> <span class="ow">::</span> <span class="n">a</span><span class="p">,</span>
  <span class="n">untracked</span> <span class="ow">::</span> <span class="n">a</span><span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>
</pre></div>

<p>we see that <code>showStatusNumbers</code> extracts the number of staged, conflicted, changed and untracked files, converts each of them to <code>String</code>, then packs them into a list.</p>
<div class="highlight"><pre><span></span><span class="nf">showGitInfo</span> <span class="n">mhash</span> <span class="p">(</span><span class="kt">MkGitInfo</span> <span class="n">bi</span> <span class="n">stat</span><span class="p">)</span> <span class="ow">=</span> <span class="n">branchInfoString</span> <span class="o">++</span> <span class="n">showStatusNumbers</span> <span class="n">stat</span>
</pre></div>

<p>and <code>showGitInfo</code> combines all the information into one list of 7 elements, which are <code>String</code> versions of the following:</p>
<ul>
<li>the branch name / git commit sha1 / the empty string</li>
<li>the number of commits the current git branch is ahead of its remote tracking branch</li>
<li>the number of commits the current git branch is behind its remote tracking branch</li>
<li>the number of files that are modified in the index relative to HEAD</li>
<li>the number of files that are in a merge conflict</li>
<li>the number of files that are modified in the work tree relative to HEAD</li>
<li>the number of untracked files</li>
</ul>
<p>Backtracking to <code>stringsFromStatus</code>:</p>
<div class="highlight"><pre><span></span><span class="nf">stringsFromStatus</span> <span class="ow">::</span> <span class="kt">Maybe</span> <span class="kt">Hash</span>
                  <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="c1">-- status</span>
                  <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
<span class="nf">stringsFromStatus</span> <span class="n">h</span> <span class="n">status</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- List</span>
    <span class="n">processed</span> <span class="ow">&lt;-</span> <span class="n">processGitStatus</span> <span class="p">(</span><span class="n">lines</span> <span class="n">status</span><span class="p">)</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">showGitInfo</span> <span class="n">h</span> <span class="n">processed</span><span class="p">)</span>
</pre></div>

<p>If <code>processGitStatus</code> returns a <code>Just GitInfo</code>, the <code>GitInfo</code> is bound to the name <code>processed</code>, then <code>showGitInfo h processed</code> is executed and the list it returns is wrapped inside a <code>Just</code> and returned by <code>stringsFromStatus</code>. If <code>processGitStatus</code> returns a <code>Nothing</code>, then <code>stringsFromStatus</code> returns a <code>Nothing</code>.</p>
<h2 id="backtracking-to-the-main-function">Backtracking to the <code>main</code> function</h2>
<div class="highlight"><pre><span></span><span class="nf">main</span> <span class="ow">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- IO</span>
  <span class="n">status</span> <span class="ow">&lt;-</span> <span class="n">getContents</span>
  <span class="n">mhash</span> <span class="ow">&lt;-</span> <span class="n">unsafeInterleaveIO</span> <span class="n">gitrevparse</span> <span class="c1">-- defer the execution until we know we need the hash</span>
  <span class="kr">let</span> <span class="n">result</span> <span class="ow">=</span> <span class="kr">do</span> <span class="c1">-- Maybe</span>
    <span class="n">strings</span> <span class="ow">&lt;-</span> <span class="n">stringsFromStatus</span> <span class="n">mhash</span> <span class="n">status</span>
    <span class="n">return</span> <span class="p">(</span><span class="n">unwords</span> <span class="n">strings</span><span class="p">)</span>
  <span class="n">putStr</span> <span class="p">(</span><span class="n">fromMaybe</span> <span class="s">&quot;&quot;</span> <span class="n">result</span><span class="p">)</span>
</pre></div>

<p>If <code>stringsFromStatus</code> returns a <code>Just [String]</code>, the <code>[String]</code> is bound to <code>strings</code>. The <code>unwords</code> function then joins the <code>String</code>s in the list together into one big <code>String</code>, with each <code>String</code> in the list separated by a space character. This <code>Maybe String</code> is then bound to the <code>result</code> let binding. If <code>result</code> is a <code>Just String</code>, then <code>putStr (fromMaybe &quot;&quot; result)</code> will print the <code>String</code> to standard output; otherwise it will print the empty string to standard output.</p>
<p>And… we are done with our main function.</p>
<p>The rest of the post covers how the output of this Haskell program is used to generate a prompt containing information about the git repo.</p>
<h2 id="generating-the-prompt">Generating the prompt</h2>
<p>Very early on, we briefly covered the <code>update_current_git_vars</code> function <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L43">defined in line 43 of zshrc.sh</a>:</p>
<div class="highlight"><pre><span></span><span class="k">function</span> update_current_git_vars<span class="o">()</span> <span class="o">{</span>
    <span class="nb">unset</span> __CURRENT_GIT_STATUS

    <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$GIT_PROMPT_EXECUTABLE</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;python&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">local</span> <span class="nv">gitstatus</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$__GIT_PROMPT_DIR</span><span class="s2">/gitstatus.py&quot;</span>
        <span class="nv">_GIT_STATUS</span><span class="o">=</span><span class="sb">`</span>python <span class="si">${</span><span class="nv">gitstatus</span><span class="si">}</span> <span class="m">2</span>&gt;/dev/null<span class="sb">`</span>
    <span class="k">fi</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;</span><span class="nv">$GIT_PROMPT_EXECUTABLE</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;haskell&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nv">_GIT_STATUS</span><span class="o">=</span><span class="sb">`</span>git status --porcelain --branch <span class="p">&amp;</span>&gt; /dev/null <span class="p">|</span> <span class="nv">$__GIT_PROMPT_DIR</span>/src/.bin/gitstatus<span class="sb">`</span>
    <span class="k">fi</span>
     <span class="nv">__CURRENT_GIT_STATUS</span><span class="o">=(</span><span class="s2">&quot;</span><span class="si">${</span><span class="p">(@s: :)_GIT_STATUS</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">)</span>
  <span class="nv">GIT_BRANCH</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">1</span><span class="o">]</span>
  <span class="nv">GIT_AHEAD</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">2</span><span class="o">]</span>
  <span class="nv">GIT_BEHIND</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">3</span><span class="o">]</span>
  <span class="nv">GIT_STAGED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">4</span><span class="o">]</span>
  <span class="nv">GIT_CONFLICTS</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">5</span><span class="o">]</span>
  <span class="nv">GIT_CHANGED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">6</span><span class="o">]</span>
  <span class="nv">GIT_UNTRACKED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">7</span><span class="o">]</span>
<span class="o">}</span>
</pre></div>

<p>This is the line that runs the Haskell program to process the output of <code>git status --porcelain --branch</code>:</p>
<div class="highlight"><pre><span></span>        <span class="nv">_GIT_STATUS</span><span class="o">=</span><span class="sb">`</span>git status --porcelain --branch <span class="p">&amp;</span>&gt; /dev/null <span class="p">|</span> <span class="nv">$__GIT_PROMPT_DIR</span>/src/.bin/gitstatus<span class="sb">`</span>
</pre></div>

<p>and the output of the Haskell program is stored in the <code>_GIT_STATUS</code> variable. The line</p>
<div class="highlight"><pre><span></span><span class="nv">__CURRENT_GIT_STATUS</span><span class="o">=(</span><span class="s2">&quot;</span><span class="si">${</span><span class="p">(@s: :)_GIT_STATUS</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">)</span>
</pre></div>

<p>splits the <code>_GIT_STATUS</code> variable using space as the delimiter and stores the result as an array in the <code>__CURRENT_GIT_STATUS</code> variable. Right after that</p>
<div class="highlight"><pre><span></span>  <span class="nv">GIT_BRANCH</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">1</span><span class="o">]</span>
  <span class="nv">GIT_AHEAD</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">2</span><span class="o">]</span>
  <span class="nv">GIT_BEHIND</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">3</span><span class="o">]</span>
  <span class="nv">GIT_STAGED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">4</span><span class="o">]</span>
  <span class="nv">GIT_CONFLICTS</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">5</span><span class="o">]</span>
  <span class="nv">GIT_CHANGED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">6</span><span class="o">]</span>
  <span class="nv">GIT_UNTRACKED</span><span class="o">=</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="o">[</span><span class="m">7</span><span class="o">]</span>
</pre></div>

<p>we see that the author makes the assumption that there are 7 elements in the <code>__CURRENT_GIT_STATUS</code> array and assigns each element to a variable. These are the same 7 elements in the list created by the <code>showGitInfo</code> Haskell function.</p>
<p>We go back to the <code>git_super_status</code> function, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L64">defined at line 64 of zshrc.sh</a>:</p>
<div class="highlight"><pre><span></span>git_super_status<span class="o">()</span> <span class="o">{</span>
  precmd_update_git_vars
  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;</span><span class="nv">$__CURRENT_GIT_STATUS</span><span class="s2">&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nv">STATUS</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$ZSH_THEME_GIT_PROMPT_PREFIX$ZSH_THEME_GIT_PROMPT_BRANCH$GIT_BRANCH</span><span class="s2">%{</span><span class="si">${</span><span class="nv">reset_color</span><span class="si">}</span><span class="s2">%}&quot;</span>
    <span class="c1"># omitted</span>
<span class="o">}</span>
</pre></div>

<p>In the <code>if</code> statement, <code>__CURRENT_GIT_STATUS</code> variable is checked for non emptiness. If so, <code>STATUS</code> is assigned a value which begins with <code>$ZSH_THEME_GIT_PROMPT_PREFIX</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L96">defined at line 96 of zshrc.sh</a>:</p>
<div class="highlight"><pre><span></span><span class="nv">ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="o">=</span><span class="s2">&quot;(&quot;</span>
</pre></div>

<p>followed by <code>$ZSH_THEME_GIT_PROMPT_BRANCH</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L99">defined at line 99 of the same file</a>:</p>
<div class="highlight"><pre><span></span><span class="nv">ZSH_THEME_GIT_PROMPT_BRANCH</span><span class="o">=</span><span class="s2">&quot;%{</span><span class="nv">$fg_bold</span><span class="s2">[magenta]%}&quot;</span>
</pre></div>

<p>This changes the foreground color (text color) to magenta.</p>
<p>This is followed by <code>$GIT_BRANCH</code>, which gives us the branch name produced by the Haskell program. Then we have a <code>%{${reset_color}%}</code> which resets the foreground color.</p>
<p>If the current directory is in a git repo and the branch is named <code>my-branch</code>, the <code>STATUS</code> variable will have the following value:</p>
<div class="highlight"><pre><span></span>(my-branch
</pre></div>

<p>Next up, we have the following code inside the overall <code>if</code> branch in <code>git_super_status</code>:</p>
<div class="highlight"><pre><span></span>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="nv">$GIT_AHEAD</span><span class="s2">&quot;</span> -ne <span class="s2">&quot;0&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
      <span class="nv">STATUS</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$STATUS$ZSH_THEME_GIT_PROMPT_AHEAD$GIT_AHEAD</span><span class="s2">%{</span><span class="si">${</span><span class="nv">reset_color</span><span class="si">}</span><span class="s2">%}&quot;</span>
    <span class="k">fi</span>
</pre></div>

<p>This appends extra stuff to <code>STATUS</code>, <strong>but only if <code>GIT_AHEAD</code> is a non-zero value</strong>. It starting with <code>ZSH_THEME_GIT_PROMPT_AHEAD</code>, <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L104">defined at line 104 of zshrc.sh</a>:</p>
<div class="highlight"><pre><span></span><span class="nv">ZSH_THEME_GIT_PROMPT_AHEAD</span><span class="o">=</span><span class="s2">&quot;%{UpArrow%G%}&quot;</span>
</pre></div>

<p>There is an up arrow character ↑ which I have replaced with the text <code>UpArrow</code> because of some technical issues that prevents it from rendering in a code block.</p>
<p>This is then followed by <code>GIT_AHEAD</code>, which is the number of git commits the current branch is ahead of its remote tracking branch (if any). Then we have another <code>%{${reset_color}%}</code>.</p>
<p>The <code>%{UpArrow%G%}</code> is used to include a ‘glitch’ to output the ↑ character. According to <a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html">zsh documentation</a>:</p>
<blockquote>
<p>%G</p>
<p>Within a %{…%} sequence, include a ‘glitch’: that is, assume that a single character width will be output. This is useful when outputting characters that otherwise cannot be correctly handled by the shell, such as the alternate character set on some terminals. The characters in question can be included within a %{…%} sequence together with the appropriate number of %G sequences to indicate the correct width. An integer between the ‘%’ and ‘G’ indicates a character width other than one. Hence %{seq%2G%} outputs seq and assumes it takes up the width of two standard characters.</p>
<p>Multiple uses of %G accumulate in the obvious fashion; the position of the %G is unimportant. Negative integers are not handled.</p>
<p>Note that when prompt truncation is in use it is advisable to divide up output into single characters within each %{…%} group so that the correct truncation point can be found.</p>
</blockquote>
<p>Building on our hypothetical example, if <code>my-branch</code> is 5 commits ahead of its remote tracking branch, the <code>GIT_AHEAD</code> variable will have value 5 and the <code>STATUS</code> variable will have the value <code>(my-branch↑5</code>. However, if <code>my-branch</code> is not ahead of its remote tracking branch, then <code>GIT_AHEAD</code> will be zero and <code>STATUS</code> will still be <code>(my-branch</code>.</p>
<p>The next line in <code>git_super_status</code>:</p>
<div class="highlight"><pre><span></span>    <span class="nv">STATUS</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$STATUS$ZSH_THEME_GIT_PROMPT_SEPARATOR</span><span class="s2">&quot;</span>
</pre></div>

<p>appends <code>ZSH_THEME_GIT_PROMPT_SEPARATOR</code>, which is <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/zshrc.sh#L98">defined at line 98</a>:</p>
<div class="highlight"><pre><span></span><span class="nv">ZSH_THEME_GIT_PROMPT_SEPARATOR</span><span class="o">=</span><span class="s2">&quot;|&quot;</span>
</pre></div>

<p>so it is a pipe character. This separates the (git branch, number of commits ahead and number of commits behind) from the rest of the information.</p>
<p>The rest of the code in <code>git_super_status</code> is of a similar nature and we shall not go through them here. We make an exception for line 91, where <code>echo &quot;$STATUS&quot;</code> prints the prompt that is built. For zsh-git-prompt to display iinformation about a git repo, code which calls the <code>git_super_status</code> function has to be at the user’s <code>~/.zshrc</code> (or included by it). <a href="https://github.com/olivierverdier/zsh-git-prompt/tree/v0.5#install">Example code from the README</a>:</p>
<div class="highlight"><pre><span></span><span class="nb">source</span> path/to/zshrc.sh
<span class="c1"># an example prompt</span>
<span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%B%m%~%b$(git_super_status) %# &#39;</span>
</pre></div>

<p>The prompt from the <code>STATUS</code> variable printed by the <code>git_super_status</code> function will be part of the <code>PROMPT</code> variable, which presumably forms the actual prompt that the user sees. Thus when the user is in a directory which is a git repository, information about that repository will be shown.</p>
<p>Note that in <code>git_super_status</code>, if <code>__CURRENT_GIT_STATUS</code> is empty, which can happen from either a failure to parse the branch line or a failure to parse any of the status lines from the output of <code>git status --porcelain --branch</code>, then <code>git_super_status</code> will not print anything and hence in</p>
<div class="highlight"><pre><span></span><span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%B%m%~%b$(git_super_status) %# &#39;</span>
</pre></div>

<p>the <code>$(git_super_status)</code> part will interpolate to nothing. A “conventional” prompt will be shown.</p>
<p>With that, our deep dive into zsh-git-prompt has come to an end.</p>
<h2 id="conclusion-ramblings">Conclusion / Ramblings</h2>
<p>We have not covered all the important code in the zsh-git-prompt repo, only the code that is actually run during normal usage. There are some <a href="https://github.com/olivierverdier/zsh-git-prompt/tree/v0.5/src/test">test code in the src/test directory</a> that the reader might want to take a look at, along with supporting code that is littered throughout the main code but used in tests as well. For instance, line 28 of <a href="https://github.com/olivierverdier/zsh-git-prompt/blob/v0.5/src/src/BranchParse.hs#L28">src/src/BranchParse.hs</a>. This code offers some insight on how one can use the venerable <a href="https://hackage.haskell.org/package/QuickCheck">QuickCheck library</a> for testing Haskell code. I could go through that in a follow up post, or maybe not, because it has taken me about a week of my free time to write this post and I need to get back to other stuff I was working on.</p>
<p>This is a pretty intense post (hence I called it a deep dive) and sometimes even I was lost in the details (but I managed to find my way back). The parts where I pasted previously discussed code was more for myself to refresh my memory than for you the reader. If you have made it all the way here and understood most of the content, then you deserve a pat on the back and my mission was successful.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/olivierverdier/zsh-git-prompt" class="uri">https://github.com/olivierverdier/zsh-git-prompt</a> (zsh-git-prompt GitHub repo)</li>
<li><a href="https://unix.stackexchange.com/a/129184" class="uri">https://unix.stackexchange.com/a/129184</a> (Unix &amp; Linux Stack Exchange: Redirect output of a command to two different files)</li>
<li><a href="https://unix.stackexchange.com/a/345508" class="uri">https://unix.stackexchange.com/a/345508</a> (Unix &amp; Linux Stack Exchange: how to redirect output to multiple log files)</li>
<li><a href="http://zsh.sourceforge.net/Doc/Release/Redirection.html" class="uri">http://zsh.sourceforge.net/Doc/Release/Redirection.html</a> (The Z Shell Manual chapter 7: Redirection)</li>
<li><a href="https://stackoverflow.com/q/13263692" class="uri">https://stackoverflow.com/q/13263692</a> (Stack Overflow: When is unsafeInterleaveIO unsafe?)</li>
<li><a href="http://hackage.haskell.org/package/base-4.10.1.0/docs/System-IO-Unsafe.html#v:unsafeInterleaveIO" class="uri">http://hackage.haskell.org/package/base-4.10.1.0/docs/System-IO-Unsafe.html#v:unsafeInterleaveIO</a> (unsafeInterleaveIO documentation)</li>
<li><a href="http://hackage.haskell.org/package/process-1.6.2.0/docs/System-Process.html#v:readProcessWithExitCode" class="uri">http://hackage.haskell.org/package/process-1.6.2.0/docs/System-Process.html#v:readProcessWithExitCode</a> (readProcessWithExitCode documentation)</li>
<li><a href="http://hackage.haskell.org/package/process-1.6.2.0/docs/System-Process.html#v:readProcess" class="uri">http://hackage.haskell.org/package/process-1.6.2.0/docs/System-Process.html#v:readProcess</a> (readProcess documentation)</li>
<li><a href="http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:unwords" class="uri">http://hackage.haskell.org/packages/archive/base/latest/doc/html/Prelude.html#v:unwords</a> (unwords documentation)</li>
<li><a href="http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Maybe.html#v:fromMaybe" class="uri">http://hackage.haskell.org/packages/archive/base/latest/doc/html/Data-Maybe.html#v:fromMaybe</a> (fromMaybe documentation)</li>
<li><a href="http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:lines" class="uri">http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:lines</a> (lines documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:parse" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:parse</a> (parse documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:-60--124--62-">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:-60–124–62-</a> ((&lt;|&gt;) documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:try" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:try</a> (try documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:manyTill" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:manyTill</a> (manyTill documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Char.html#v:anyChar" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Char.html#v:anyChar</a> (anyChar documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:eof" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:eof</a> (eof documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Char.html#v:noneOf" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Char.html#v:noneOf</a> (noneOf documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:between" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:between</a> (between documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:many1" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec.html#v:many1</a> (many1 documentation)</li>
<li><a href="https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Char.html#v:digit" class="uri">https://hackage.haskell.org/package/parsec-3.1.11/docs/Text-Parsec-Char.html#v:digit</a> (digit documentation)</li>
<li><a href="http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:either" class="uri">http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:either</a> (either documentation)</li>
<li><a href="http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:const" class="uri">http://hackage.haskell.org/package/base-4.10.1.0/docs/Prelude.html#v:const</a> (const documentation)</li>
<li><a href="http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Traversable.html#v:for" class="uri">http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Traversable.html#v:for</a> (for documentation)</li>
<li><a href="http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Traversable.html#v:traverse" class="uri">http://hackage.haskell.org/package/base-4.10.1.0/docs/Data-Traversable.html#v:traverse</a> (traverse documentation)</li>
<li><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.Traversable.html#line-235" class="uri">https://hackage.haskell.org/package/base-4.10.1.0/docs/src/Data.Traversable.html#line-235</a> (definition of traverse for lists)</li>
<li><a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/src/GHC.Base.html#line-716" class="uri">https://hackage.haskell.org/package/base-4.10.1.0/docs/src/GHC.Base.html#line-716</a> (Applicative instance for Maybe)</li>
<li><a href="https://git-scm.com/docs/git-status/2.15.0" class="uri">https://git-scm.com/docs/git-status/2.15.0</a> (git status manpage, for git 2.15.0)</li>
<li><a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html" class="uri">http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html</a> (The Z Shell Manual, Chapter 13: Prompt Expansion)</li>
</ul>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/haskell-deep-dive-zsh-git-prompt.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/haskell-deep-dive-zsh-git-prompt.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>How to install zsh-git-prompt</title>
    <link href="http://blog.pangyanhan.com/posts/how-to-install-zsh-git-prompt.html" />
    <id>http://blog.pangyanhan.com/posts/how-to-install-zsh-git-prompt.html</id>
    <published>2017-12-09T13:19:00Z</published>
    <updated>2017-12-09T13:19:00Z</updated>
    <summary type="html"><![CDATA[<h2>How to install zsh-git-prompt</h2>
<p class="meta">
  09 Dec 2017,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/zsh.html">zsh</a>, <a href="/tags/zsh-git-prompt.html">zsh-git-prompt</a>
</div>
<div class="post">
  <p>This post shows you how to install <a href="https://github.com/olivierverdier/zsh-git-prompt">zsh-git-prompt</a>, a program which customizes the zsh prompt by displaying additional information whenever a user cds into a git repository.</p>
<p>It is meant for readers of my other blog post, <a href="/posts/haskell-deep-dive-zsh-git-prompt.html">Haskell deep dive: zsh-git-prompt</a>, who do not have zsh installed and/or do not have zsh-git-prompt installed.</p>
<p><strong>NOTE:</strong> If you do not wish to install zsh and/or zsh-git-prompt but just want to check out what it does, head over to <a href="https://github.com/yanhan/zsh-git-prompt-docker" class="uri">https://github.com/yanhan/zsh-git-prompt-docker</a> for a Docker image that has zsh-git-prompt installed, along with instructions on how to use it.</p>
<h2 id="installing-zsh">Installing zsh</h2>
<p>Follow the instructions at <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" class="uri">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a>. For simplicity, you should use your system’s package manager to do it.</p>
<h2 id="recommended-oh-my-zsh">Recommended: oh-my-zsh</h2>
<p>You are highly recommended to install <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>, because it comes with some nice default settings and has a pretty big ecosystem of plugins and themes that you can later on choose to use for your customized setup.</p>
<p>Follow the installation instructions at <a href="https://github.com/robbyrussell/oh-my-zsh#basic-installation" class="uri">https://github.com/robbyrussell/oh-my-zsh#basic-installation</a>. I use the following command:</p>
<div class="highlight"><pre><span></span>sh -c <span class="s2">&quot;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="k">)</span><span class="s2">&quot;</span>
</pre></div>

<p>This command might error out and say you are missing some programs. Install what it says that you lack using your package manager. When I was building <a href="https://github.com/yanhan/zsh-git-prompt-docker">the Docker image for this</a>, it was complaining about missing <code>make</code> and <code>xz</code>.</p>
<h2 id="installing-zsh-git-prompt">Installing zsh-git-prompt</h2>
<p>We will be cloning the zsh-git-prompt git repo at your home directory.</p>
<div class="highlight"><pre><span></span><span class="nb">cd</span> ~
git clone https://github.com/olivierverdier/zsh-git-prompt.git
<span class="nb">cd</span> zsh-git-prompt
stack setup
stack build
stack install
</pre></div>

<p>The <code>stack install</code> command should install a binary named <code>gitstatus</code> in the <code>~/zsh-git-prompt/src/.bin/</code> directory (not to be confused with the actual <code>git status</code> command). Do verify that this is the case.</p>
<p>Append the following to your <code>~/.zshrc</code>:</p>
<div class="highlight"><pre><span></span><span class="nb">source</span> ~/zsh-git-prompt/zshrc.sh
<span class="nv">GIT_PROMPT_EXECUTABLE</span><span class="o">=</span><span class="s1">&#39;haskell&#39;</span>
<span class="c1"># an example prompt</span>
<span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%B%m%~%b$(git_super_status) %# &#39;</span>
</pre></div>

<p>Feel free to change the value of the <code>PROMPT</code>, so long it includes the <code>$(git_super_status)</code> somewhere. Personally, I use:</p>
<div class="highlight"><pre><span></span><span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_super_status)&#39;</span>
</pre></div>

<p>For more information on what those funny <code>%B</code>, <code>%m</code>, <code>%{$fg[cyan]%}</code>, <code>%c</code> and so on mean, please consult <a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html" class="uri">http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html</a></p>
<h2 id="reload-the-shell-and-see-what-zsh-git-prompt-does">Reload the shell and see what zsh-git-prompt does</h2>
<p>If you are already on zsh, just run the following to source the <code>~/.zshrc</code> and load the changes:</p>
<div class="highlight"><pre><span></span><span class="nf">source</span> <span class="o">~/.</span><span class="n">zshrc</span>
</pre></div>

<p>Otherwise, run <code>zsh</code> to open a new zsh shell.</p>
<p>To see what zsh-git-prompt does, cd to a git repository. You should see that your prompt has additional information about the git repository, similar to <code>(master|✔)</code> or <code>(somebranch|…)</code> or <code>(feature-branch|5↑2↓)</code>. If you cd to a directory which is not inside a git repo, you should not see that information.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/olivierverdier/zsh-git-prompt" class="uri">https://github.com/olivierverdier/zsh-git-prompt</a> (zsh-git-prompt GitHub repo)</li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh" class="uri">https://github.com/robbyrussell/oh-my-zsh</a> (oh-my-zsh GitHub repo)</li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" class="uri">https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH</a> (Instructions to install zsh, provided by oh-my-zsh)</li>
<li><a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html" class="uri">http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html</a> (zsh prompt expansion)</li>
</ul>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/how-to-install-zsh-git-prompt.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/how-to-install-zsh-git-prompt.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>Using Swagger UI with any codebase</title>
    <link href="http://blog.pangyanhan.com/posts/2017-11-26-using-swagger-ui-with-any-codebase.html" />
    <id>http://blog.pangyanhan.com/posts/2017-11-26-using-swagger-ui-with-any-codebase.html</id>
    <published>2017-11-26T14:43:00Z</published>
    <updated>2017-11-26T14:43:00Z</updated>
    <summary type="html"><![CDATA[<h2>Using Swagger UI with any codebase</h2>
<p class="meta">
  26 Nov 2017,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/swagger.html">swagger</a>, <a href="/tags/swagger-ui.html">swagger-ui</a>
</div>
<div class="post">
  <p>This post shows you how to use Swagger UI with any codebase. There are <strong>no library dependencies</strong> once you extract the assets. The only things you need are a web server and a file containing the API documentation in the <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md">OpenAPI format</a>.</p>
<p>At the end of the post, you should be able to use your web server to host API documentation that looks something like <a href="http://petstore.swagger.io/">http://petstore.swagger.io</a></p>
<p>Like many of my posts, this is technical and there are instructions you have to follow.</p>
<h2 id="accompanying-code">Accompanying code</h2>
<p>The GitHub repo is at <a href="https://github.com/yanhan/swagger-ui-any-codebase" class="uri">https://github.com/yanhan/swagger-ui-any-codebase</a></p>
<p>We will be making use of some files there in this demo.</p>
<h2 id="the-big-picture">The big picture</h2>
<p>We will be making use of the <a href="https://www.npmjs.com/package/swagger-ui-dist">swagger-ui-dist</a> npm package and extracting the assets from there. To do so, we will be using <a href="https://github.com/creationix/nvm">nvm</a> to install npm and use npm to install swagger-ui-dist. Once that is done, we can extract the assets.</p>
<p>With the assets and an API documentation file, we can use a web server to serve the API documentation Swagger UI style.</p>
<h2 id="create-a-new-directory">Create a new directory</h2>
<p>Create a new directory somewhere to reduce clutter. We will be doing everything in this new directory.</p>
<h2 id="extracting-static-assets-for-swagger-ui">Extracting static assets for Swagger UI</h2>
<p>This section focuses on extracting the static assets required by Swagger UI.</p>
<h3 id="installing-nvm">Installing nvm</h3>
<p>Follow the instructions at the <a href="https://github.com/creationix/nvm#install-script">nvm GitHub README</a>. I have copied and pasted what I used:</p>
<div class="highlight"><pre><span></span>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash
</pre></div>

<p>nvm allows us to install multiple versions of Nodejs without having to override the system’s Nodejs.</p>
<h3 id="install-nodejs-using-nvm">Install Nodejs using nvm</h3>
<p>I am using Nodejs 8.9.1 in this demo. I believe any 8.x Nodejs should work.</p>
<div class="highlight"><pre><span></span>nvm install 8.9.1
</pre></div>

<h3 id="install-swagger-ui-dist">Install swagger-ui-dist</h3>
<p>Create a <code>package.json</code> file with the following contents:</p>
<div class="highlight"><pre><span></span><span class="p">{</span>
    <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
    <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
        <span class="s2">&quot;swagger-ui-dist&quot;</span><span class="o">:</span> <span class="s2">&quot;~3.5.0&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

<p>Then activate Nodejs 8.9.1 and install the package:</p>
<div class="highlight"><pre><span></span>nvm use 8.9.1
npm install
</pre></div>

<p>You should see a <code>node_modules</code> directory. We will be extracting the static assets of <code>swagger-ui-dist</code> from it soon.</p>
<h3 id="extract-static-assets">Extract static assets</h3>
<p>Copy the <code>node_modules/swagger-ui-dist</code> directory:</p>
<div class="highlight"><pre><span></span>cp -R node_modules/swagger-ui-dist .
</pre></div>

<p>In the <code>swagger-ui-dist</code> directory, there is a file named <code>index.html</code>. Use a text editor to open that file and go to line 76. You should see code like this:</p>
<div class="highlight"><pre><span></span>  <span class="kr">const</span> <span class="nx">ui</span> <span class="o">=</span> <span class="nx">SwaggerUIBundle</span><span class="p">({</span>
    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://petstore.swagger.io/v2/swagger.json&quot;</span><span class="p">,</span>
</pre></div>

<p>For purposes of the demo below, modify the value of the <code>url</code> key so that it looks like:</p>
<div class="highlight"><pre><span></span>  <span class="kr">const</span> <span class="nx">ui</span> <span class="o">=</span> <span class="nx">SwaggerUIBundle</span><span class="p">({</span>
    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/api-docs.yml&quot;</span><span class="p">,</span>
</pre></div>

<p>This is telling the code to fire a request to <code>/api-docs.yml</code> to load the API documentation. Feel free to change the name of this endpoint, as long as you configure your web server supports it and return the correct file.</p>
<p>In fact, you can copy / move the entire <code>swagger-ui-dist</code> directory to your web server’s repository and take things from there (while skipping the rest of this article). If you are unsure on how to proceed, carry on reading so you can see a demo of how we incorporate some example API documentation so it is hosted on a Flask server.</p>
<h2 id="demo-using-flask-server-using-docker">Demo using Flask server (using Docker)</h2>
<p>This is the easy way.</p>
<p>Simply clone <a href="https://github.com/yanhan/swagger-ui-any-codebase" class="uri">https://github.com/yanhan/swagger-ui-any-codebase</a> and run the following commands to build the Docker image and run it:</p>
<div class="highlight"><pre><span></span>./build-docker.sh
./run-docker.sh
</pre></div>

<p>Then go to <code>http://127.0.0.1:5000/swagger-ui</code> . Tadah!</p>
<h2 id="demo-using-flask-server-not-using-docker">Demo using Flask server (not using Docker)</h2>
<p>This is the hard way. With the Docker option, I don’t really recommend doing this unless you want to familiarize yourself with the pyenv toolchain.</p>
<h3 id="install-pyenv">Install pyenv</h3>
<p>Follow the instructions at the <a href="https://github.com/pyenv/pyenv#installation">pyenv GitHub README</a> to install pyenv. I used the instructions at the <a href="https://github.com/pyenv/pyenv-installer">pyenv-installer</a> to install pyenv. Specifically, the following command:</p>
<div class="highlight"><pre><span></span>curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
</pre></div>

<h3 id="install-python-3.6.3-using-pyenv">Install Python 3.6.3 using pyenv</h3>
<p>Now we install Python 3.6.3 using pyenv. Any version of Python 3.x should work fine.</p>
<div class="highlight"><pre><span></span>pyenv install 3.6.3
</pre></div>

<p>If you encounter any errors installing pyenv, google is your friend.</p>
<h3 id="create-a-virtualenv-for-this-demo">Create a virtualenv for this demo</h3>
<p>We will be creating a virtualenv to install Flask. We will be naming it <code>swagger-demo</code>.</p>
<div class="highlight"><pre><span></span>pyenv virtualenv 3.6.3 swagger-demo
</pre></div>

<h3 id="install-flask">Install Flask</h3>
<p>Now we will be installing Flask inside the <code>swagger-demo</code> virtualenv:</p>
<div class="highlight"><pre><span></span>pyenv activate swagger-demo
pip install -r requirements.txt
</pre></div>

<h3 id="web-server-code">Web server code</h3>
<p>Get it from <a href="https://github.com/yanhan/swagger-ui-any-codebase/blob/master/server.py" class="uri">https://github.com/yanhan/swagger-ui-any-codebase/blob/master/server.py</a> and save it as <code>server.py</code>.</p>
<p>We will be going through some of the code later.</p>
<h3 id="api-docs.yml-file">api-docs.yml file</h3>
<p>Get it from <a href="https://github.com/yanhan/swagger-ui-any-codebase/blob/master/api-docs.yml" class="uri">https://github.com/yanhan/swagger-ui-any-codebase/blob/master/api-docs.yml</a> and save it as <code>api-docs.yml</code>.</p>
<p>This is our example API documentation saved as a YAML file.</p>
<h3 id="running-the-server">Running the server</h3>
<div class="highlight"><pre><span></span>python server.py
</pre></div>

<p>Then go to <a href="http://127.0.0.1:5000/swagger-ui" class="uri">http://127.0.0.1:5000/swagger-ui</a> to see the documentation. Tadah!</p>
<h2 id="how-everything-works">How everything works</h2>
<p>Understand this section and you can adapt the Swagger UI assets to any codebase you are using. You are recommended to open <a href="https://github.com/yanhan/swagger-ui-any-codebase/blob/master/server.py" class="uri">https://github.com/yanhan/swagger-ui-any-codebase/blob/master/server.py</a> and refer to it as we explain the code.</p>
<p>Recall that earlier we extracted the <code>swagger-ui-dist</code> directory from the swagger-ui-dist NPM package. That directory contains all the static assets required. We just need to find a way for the server to deliver the <code>swagger-ui-dist/index.html</code> file on a user request.</p>
<p>Notice that to see the docs, we go to the path <code>/swagger-ui</code>, which serves the <code>swagger-ui-dist/index.html</code> file. Which implies that our web server must have an endpoint for this path taht serves the file. For our demo, it is right here:</p>
<div class="highlight"><pre><span></span><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&quot;/swagger-ui/&quot;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">swagger_ui</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">send_from_directory</span><span class="p">(</span><span class="n">SWAGGER_UI_DIST_DIR</span><span class="p">,</span> <span class="s2">&quot;index.html&quot;</span><span class="p">)</span>
</pre></div>

<p>This tells Flask to return the <code>index.html</code> page from our <code>swagger-ui-dist</code> directory. Recall that earlier, we modified that file so the <code>SwaggerUIBundle</code> has its <code>url</code> value changed:</p>
<div class="highlight"><pre><span></span>  <span class="kr">const</span> <span class="nx">ui</span> <span class="o">=</span> <span class="nx">SwaggerUIBundle</span><span class="p">({</span>
    <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/api-docs.yml&quot;</span><span class="p">,</span>
</pre></div>

<p>which implies we must have another route to <code>/api-docs.yml</code> that returns the file containing the API documentation. Indeed, it is here:</p>
<div class="highlight"><pre><span></span><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&quot;/api-docs.yml&quot;</span><span class="p">)</span>
<span class="nd">@nocache</span>
<span class="k">def</span> <span class="nf">swagger_api_docs_yml</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">send_from_directory</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;api-docs.yml&quot;</span><span class="p">)</span>
</pre></div>

<p>The endpoint and the filename do not have to be the same as long as the endpoint you are using returns the correct file; you can use whatever name you like for the endpoint and the filename. We are only using the same name to reduce confusion. I added the <code>nocache</code> decorator so that the docs served by the Flask server will be updated as I save the actual file and refresh my browser. Credits to <a href="https://arusahni.net/blog/2014/03/flask-nocache.html">Aru Sahni’s blog post</a> for this code.</p>
<p>Finally, if we open <code>swagger-ui-dist/index.html</code>, we will see some references to other static assets with the <code>./</code> prefix, for instance:</p>
<div class="highlight"><pre><span></span>./swagger-ui.css
./favicon-32x32.png
./favicon-16x16.png
</pre></div>

<p>These are all available at the <code>swagger-ui-dist</code> directory. Due to the <code>./</code> and the fact that we are hosting the API docs at <code>/swagger-ui</code>, these assets will be requested from the web server under <code>/swagger-ui</code>. For instance, <code>/swagger-ui/favicon-32x32.png</code>.</p>
<p>Hence we need an endpoint for serving these assets, right here:</p>
<div class="highlight"><pre><span></span><span class="nd">@app.route</span><span class="p">(</span><span class="s2">&quot;/swagger-ui/&lt;asset&gt;&quot;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">swagger_assets</span><span class="p">(</span><span class="n">asset</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">send_from_directory</span><span class="p">(</span><span class="n">SWAGGER_UI_DIST_DIR</span><span class="p">,</span> <span class="n">asset</span><span class="p">)</span>
</pre></div>

<p>If we do not do this step, we will be able to load <code>/swagger-ui</code> but fail to load the other static assets. Open the Network Inspector / similar of your web browser and you will see a number of 404s. In fact, that was how I debugged the problem.</p>
<h2 id="security-implications">Security implications</h2>
<p>The big drawback to this approach is security. Specifically, exposure of internal API docs to the public Internet. Here, I highlight some concerns that I see.</p>
<ol style="list-style-type: decimal">
<li>Please disable this endpoint for production. In fact, you should write this code immediately so you don’t forget about it.</li>
<li>If you are writing docs for an internal API, please take care not to expose this documentation to the Internet. Minimally, your web server should not have a public IP address and should be on a private network that is only accessible using a VPN.</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>And that completes our explanation of the web server code. Hopefully, you will be able to adapt this to any codebase.</p>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/2017-11-26-using-swagger-ui-with-any-codebase.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/2017-11-26-using-swagger-ui-with-any-codebase.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>How to use GPG to encrypt stuff</title>
    <link href="http://blog.pangyanhan.com/posts/2017-09-27-how-to-use-gpg-to-encrypt-stuff.html" />
    <id>http://blog.pangyanhan.com/posts/2017-09-27-how-to-use-gpg-to-encrypt-stuff.html</id>
    <published>2017-09-27T22:13:07Z</published>
    <updated>2017-09-27T22:13:07Z</updated>
    <summary type="html"><![CDATA[<h2>How to use GPG to encrypt stuff</h2>
<p class="meta">
  27 Sep 2017,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/gpg.html">gpg</a>
</div>
<div class="post">
  <p>You want to exchange a message / file securely with another party and do not want anyone else to look at the information. This is where you can use GPG to encrypt the message / file you want to send.</p>
<p>The overview of the steps are as follows:</p>
<ol style="list-style-type: decimal">
<li>Make sure everything is in one file. If there are multiple files, you can put them inside a folder and create a tarball of that folder, or just directly tarball all the files</li>
<li>(OPTIONAL) Sign the file using your <strong>private key</strong>. This will generate a signature that can be verified using your public key</li>
<li>Encrypt the file using the recipient’s <strong>public key</strong>. This will generate an encrypted file that can only be decrypted using the recipient’s private key</li>
<li>Send the encrypted file and (optionally) the signature to the other person</li>
<li>The recipient of the message will decrypt the encrypted file using his/her private key</li>
<li>(OPTIONAL) The recipient of the message will verify the signature using your public key</li>
</ol>
<p>The steps below will not correspond to the points in this overview because the guide is intended to be as complete as possible without bogging you down with unnecessary details.</p>
<h2 id="step-1-generate-a-gpg-keypair">Step 1: Generate a GPG keypair</h2>
<p>For recipient: This step is absolutely required.</p>
<p>For the sender: This step is required if you wish to send a signature to the recipient. Otherwise you can skip this step.</p>
<p>To generate a GPG keypair, you first have to install GPG. This should come automatically with Linux. For Mac OS X users, I highly recommend that you install <a href="https://gpgtools.org/">GPG Suite</a>.</p>
<p>To generate a key, run the following command:</p>
<div class="highlight"><pre><span></span>gpg --gen-key
</pre></div>

<p>You will be prompted for some information. I will be guiding you through the flow below.</p>
<div class="highlight"><pre><span></span>gpg (GnuPG) 1.4.16; Copyright (C) 2013 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection?
</pre></div>

<p>Type <code>1</code> followed by Enter for the <code>RSA and RSA</code> option.</p>
<div class="highlight"><pre><span></span>RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)
</pre></div>

<p>Type <code>4096</code> followed by Enter. We want our key to be as strong as possible.</p>
<div class="highlight"><pre><span></span>Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for? (0)
</pre></div>

<p>Type <code>0</code> followed by Enter. For convenience, we do not want the key to expire</p>
<div class="highlight"><pre><span></span>Key does not expire at all
Is this correct? (y/N)
</pre></div>

<p>Type <code>y</code> followed by Enter.</p>
<div class="highlight"><pre><span></span>You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and Email Address in this form:
    &quot;Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;&quot;

Real name:
</pre></div>

<p>Type your real name followed by Enter.</p>
<div class="highlight"><pre><span></span>Email address:
</pre></div>

<p>Type your email address followed by Enter. The email address you use depends on the context. If you are exchanging files securely for work, then type your work email address.</p>
<div class="highlight"><pre><span></span>Comment:
</pre></div>

<p>This can be left blank. Press Enter if you have nothing to add.</p>
<div class="highlight"><pre><span></span>You selected this USER-ID:
    &quot;Your name &lt;your.name@yourdomain.com&gt;&quot;

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?
</pre></div>

<p>Type <code>O</code> followed by Enter.</p>
<div class="highlight"><pre><span></span>You need a Passphrase to protect your secret key.
</pre></div>

<p>If you are using a GUI, you will see a GUI prompt open up for your passphrase. <strong>Do not forget your passphrase!!!</strong> Otherwise your GPG keypair is worthless. Use something long and easily remembered by you but hard for other people and computers to guess. <a href="https://blog.lastpass.com/2013/04/how-to-create-secure-master-password.html/">This blog post by LastPass</a> is a good guide to generating a good passphrase.</p>
<div class="highlight"><pre><span></span>We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

Not enough random bytes available.  Please do some other work to give
the OS a chance to collect more entropy! (Need _ more bytes)
</pre></div>

<p>Once you the above, just go do some other stuff at your computer. It could take a few minutes before this is done. To speed up the process, you can run some intensive commands like <code>cd ~ &amp;&amp; find . -type f</code> (assuming you have a lot of files in your home folder)</p>
<div class="highlight"><pre><span></span>gpg: key ________ marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   4096R/________ 2017-09-26
      Key fingerprint = ____ ____ ____ ____ ____  ____ ____ ____ ____ ____
uid                  Your Name &lt;your.name@yourdomain.com&gt;
sub   4096R/________ 2017-09-26
</pre></div>

<h2 id="step-2-make-your-gpg-public-key-available-to-the-other-party">Step 2: Make your GPG public key available to the other party</h2>
<p>For the recipient: This step is absolutely required.</p>
<p>For the sender: This step is required if you wish to send a signature to the recipient. Otherwise you can skip this step.</p>
<p>Regardless of whether you are the sender or the recipient, we shall cover 2 methods of making your GPG public key available to the other party.</p>
<h3 id="method-1-send-your-public-key-as-a-file-to-the-recipient">Method 1: Send your public key as a file to the recipient</h3>
<p>Remember the email you used to create your GPG keypair? We shall assume it is <code>your.name@yourdomain.com</code>. Run the following command:</p>
<div class="highlight"><pre><span></span>gpg --armor --output mypubkey.gpg --export your.name@yourdomain.com
</pre></div>

<p>The <code>mypubkey.gpg</code> file should look similar to the following:</p>
<div class="highlight"><pre><span></span>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mfgQighgkm47609/132415jkamfgASHDFGkgm48610xktgy46523jrkfagmb01f4
...
...
... A lot of similar lines omitted ...
...
...
-----END PGP PUBLIC KEY BLOCK-----
</pre></div>

<p>Now you can send this file to your friend / colleague.</p>
<h3 id="method-2-upload-your-public-key-to-a-pgp-public-key-server">Method 2: Upload your public key to a PGP public key server</h3>
<p>The alternative method is to upload your public key a PGP public key server and have your friend / colleague download your public key from there.</p>
<p>We have to find out the public key ID of our GPG key. Do so by running the following command:</p>
<div class="highlight"><pre><span></span>gpg --list-secret-keys
</pre></div>

<p>You should see something similar to the following:</p>
<div class="highlight"><pre><span></span>/home/youruser/.gnupg/secring.gpg
---------------------------------
sec   4096R/DEADBEEF 2017-09-26
uid                  Your name here &lt;your.name@yourdomain.com&gt;
ssb   4096R/A0156F2D 2017-09-26
</pre></div>

<p>The key ID of your GPG public key is in the first row on the same line as the <code>sec</code> field. In this made up example here, it is <code>DEADBEEF</code>.</p>
<p>To export your GPG public key, run the following command, replacing the public key ID accordingly:</p>
<div class="highlight"><pre><span></span>gpg --send-keys DEADBEEF
</pre></div>

<p>You should see something like the following:</p>
<div class="highlight"><pre><span></span>gpg: sending key DEADBEEF to hkp server keys.gnupg.net
</pre></div>

<p>Take note of the GPG server that the key was uploaded to. We will be needing it later.</p>
<h2 id="step-3-for-sender-retrieve-the-message-recipients-public-key">Step 3: (For sender) Retrieve the message recipient’s public key</h2>
<p>This step is for the sender of the message. We shall cover what follows from the 2 methods that we covered in step 2.</p>
<h3 id="method-1-friend-colleague-sent-his-her-public-key-to-you">Method 1: Friend / colleague sent his / her public key to you</h3>
<p>This corresponds to Step 2 Method 1, where your friend / colleague (the recipient of the message) send his / her public key to you in a file. We have to import the public key into our keyring. Suppose this file is called <code>recipient-pubkey.gpg</code>. To import it, run:</p>
<div class="highlight"><pre><span></span>gpg --import recipient-pubkey.gpg
</pre></div>

<p>You should see output similar to the following:</p>
<div class="highlight"><pre><span></span>gpg: key ______: public key &quot;Your friend&#39;s name &lt;your.friend@yourfriendsdomain.com&gt;&quot; imported
gpg: Total number processed: 1
gpg:               imported: 1
</pre></div>

<h3 id="method-2-friend-colleague-uploaded-his-her-gpg-public-key-to-a-pgp-public-key-server">Method 2: Friend / colleague uploaded his / her GPG public key to a PGP public key server</h3>
<p>Ask your friend / colleague the server that he / she uploaded his / her public key to.</p>
<p>Suppose it is <code>keys.gnupg.net</code>. Suppose your friend’s email address is <code>your.friend@yourfriendsdomain.com</code>. To find his / her key, run the following command (replacing the keyserver and email address accordingly):</p>
<div class="highlight"><pre><span></span>gpg --keyserver keys.gnupg.net --search-key your.friend@yourfriendsdomain.com
</pre></div>

<p>If everything goes well, you should see output similar to the following:</p>
<div class="highlight"><pre><span></span>gpg: data source: http://192.94.109.73:11371
(1)     Your Friend&#39;s Name &lt;your.friend@yourfriendsdomain.com&gt;
        4096 bit RSA key 5019A105E6069CD4, created: 2017-09-26
Keys 1-1 of 1 for &quot;your.friend@yourfriendsdomain.com&quot;. Enter number(s), N)ext, or Q)uit &gt;
</pre></div>

<p>Type <code>1</code> followed by enter if you are sure that this is your friend’s public key and GPG will proceed to import it into your public keyring.</p>
<p>If you are unsure this key belongs to your friend, verify with him / her. Get them to run the following command:</p>
<div class="highlight"><pre><span></span>gpg --list-keys --keyid-format LONG --fingerprint
</pre></div>

<p>Verify that the public key ID you see (in our example it is <code>5019A105E6069CD4</code>) matches the his / her public key ID. Proceed to import the key if everything is good.</p>
<h2 id="step-4-for-sender-encrypt-the-message">Step 4: (For sender) Encrypt the message</h2>
<p>We will now encrypt the message using the sender’s public key. Assuming the sender’s email that is associated with public key is <code>your.friend@yourfriendsdomain.com</code> and the file you want to encrypt is called <code>myfile.txt</code>, run the following command:</p>
<div class="highlight"><pre><span></span>gpg --output myfile.txt.gpg --encrypt --recipient your.friend@yourfriendsdomain.com  myfile.txt
</pre></div>

<p>The encrypted file will be at <code>myfile.txt.gpg</code>. If you take a look at it, you will see that it is in a binary format. Now you can send this file to your friend / colleague. Only the recipient will be able to decrypt it using his / her private key.</p>
<h2 id="step-5-for-sender-signing-the-message">Step 5: (For sender) Signing the message</h2>
<p><strong>NOTE:</strong> This step is optional. The reason why you as a sender may want to sign the message is for the recipient to verify that it is indeed you who sent the message and not someone else. This is a form of anti-tampering.</p>
<p>Instead of signing the message (which is also a form of encrypting the message), we shall generate a checksum of the message and sign that instead.</p>
<p>Let us generate a SHA256 sum of the <strong>unencrypted</strong> file (assuming it is named <code>myfile.txt</code>) and sign that using our <strong>private key</strong>:</p>
<div class="highlight"><pre><span></span>shasum -a 256 myfile.txt | awk &#39;{print $1}&#39; &gt;myfile.txt.sha256sum
gpg --output myfile.txt.sha256sum.sig --sign myfile.txt.sha256sum
</pre></div>

<p>You can then send <code>myfile.txt.sha256sum.sig</code> to the recipient.</p>
<h2 id="step-6-for-receiver-decrypt-the-message">Step 6: (For receiver) Decrypt the message</h2>
<p>Suppose the encrypted message sent by the sender is called <code>myfile.txt.gpg</code> and it was encrypted using your public key.</p>
<p>To decrypt this message using your private key, run:</p>
<div class="highlight"><pre><span></span>gpg --output myfile.txt --decrypt myfile.txt.gpg
</pre></div>

<p>You will be prompted for the passphrase of your private key. Assuming the sender specified the recipient of the message using the <code>--recipient</code> option when encrypting the message, GPG should be able to identify the correct private key to use (assuming you have multiple keypairs).</p>
<p>Now you have the message! It is in the file specified by the <code>--output</code> flag. If the sender did not provide a signature and you trust him / her, then you are done. Otherwise, go on to the next step to verify the signature.</p>
<h2 id="step-7-for-receiver-verify-the-signature-of-the-message">Step 7: (For receiver) Verify the signature of the message</h2>
<p>Suppose the signature is named <code>myfile.txt.sha256sum.sig</code>. To verify that the signature is indeed sent by the sender, run the following command:</p>
<div class="highlight"><pre><span></span>gpg --verify myfile.txt.sha256sum.sig
</pre></div>

<p>You should see an output similar to the following:</p>
<div class="highlight"><pre><span></span>gpg: Signature made Tue 26 Sep 2017 09:10:22 PM SGT
gpg:                using RSA key ID 741A869EBC910BE2
gpg: Good signature from &quot;Sender&#39;s name &lt;sender.name@sendersdomain.com&gt;&quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 85AF 5410 058C FE1D 76DA  986F 910C B963 468A 0F16
</pre></div>

<p>Check that the public key ID and fingerprint. matches the sender’s public key ID in your keyring. Run <code>gpg --list-keys --keyid-format LONG --fingerprint</code> to list the public keys in your GPG keyring alongside their fingerprint.</p>
<p>To get the actual content from the signature, run:</p>
<div class="highlight"><pre><span></span>gpg --output myfile.txt.sha256sum  --decrypt myfile.txt.sha256sum.sig
</pre></div>

<p>You should see some output very similar to / the same as that from running the command <code>gpg --verify myfile.txt.sha256sum.sig</code>.</p>
<p>You should verify that the sha256 sum inside <code>myfile.txt.sha256sum</code> is the same as the sha256 sum of the decrypted file that the sender sent you.</p>
<p>And if you only wish to send and / or receive messages securely, this is the end. If you are curious about why we go through all these trouble just to exchange some files, read the next section.</p>
<h2 id="why-go-through-all-these-trouble-why-use-gpg-to-exchange-messages">Why go through all these trouble? / Why use GPG to exchange messages?</h2>
<p>I have to admit that I am not the best person to write this section due to my lack of knowledge. That being said, I will be explaining the concepts here to the best of my ability.</p>
<p>GPG uses public key cryptography. This is also known as asymmetric encryption, where a <strong>keypair</strong> consisting of a public and private key is involved, as opposed to symmetric encryption, which makes use of a single key. The public key can be distributed to whoever you want. The private key must be closely guarded and in GPG’s case is protected by a strong passphrase.</p>
<p>Suppose Alice wants to send a message to Bob. Alice will encrypt Bob’s message using Bob’s <strong>public key</strong>. This ensures that no one else other than Bob can read the message, because only Bob can decrypt the message using his <strong>private key</strong>. Anyone with Bob’s public key encrypt a message that only Bob can view. This explanation should also explain why Bob must guard his private key - because anyone with his private key can decrypt any message encrypted using his public key.</p>
<p>Now, Alice has guaranteed that whatever message she sends to Bob can only be viewed by Bob. This ensures the <strong>privacy</strong> of the message.</p>
<p>However, anyone with Bob’s public key can send a message intended for him. How can Bob ensure that when Alice says she sent him a message, that the message is from Alice and not from someone else?</p>
<p>This is where signatures come in. Alice can generate a file containing the checksum of the original, plaintext message and sign that file using her <strong>private key</strong>. Anyone who has Alice’s <strong>public key</strong> (and trusts her public key) can verify the authenticity of that file, because to generate that signature, Alice’s <strong>private key</strong> is required. Assuming that Alice’s private key has not been compromised, it is pretty much impossible for anyone to forge the signature, or for Alice to deny that she did not generate the signature. This ensures the <strong>authenticity</strong> of the message, that it is indeed sent by Alice herself and not anyone else.</p>
<p>The reason why Alice signs a file containing the checksum of the original message is because signing a file will encrypt it using Alice’s public key. Anyone with Alice’s public key can decrypt that file. So it is not safe for Alice to sign the message she wants to send to Bob, otherwise anyone with her public key (and not just Bob) can read it. A file containing the checksum can be sent through non trusted channels without allowing anyone to reverse engineer the contents of the original message, while letting the intended recipient verify the authenticity of the message. This is why I will recommend sending a signature to the recipient even though it is completely optional.</p>
<p>If you are relatively new to public key cryptography, the above could take a while to grasp. It is perfectly normal.</p>
<p>If you have read everything so far, you will notice something. Everything hinges on both parties trusting each other’s public keys. Especially Alice trusting Bob’s public key. Why do I say so? Suppose there is a malicious 3rd party called Eve that is intercepting all traffic between Alice and Bob. Through some very clever means, Alice got Eve’s public key instead of Bob’s public key and believes that it is Bob’s public key. When Alice encrypts a message intended for Bob using “Bob’s” public key, Eve can decrypt the message that was originally meant for Bob. Furthermore, assuming that Eve has Bob’s public key (it is a public key after all), Eve can alter the contents of the message, encrypt it with Bob’s public key and then send the altered message to Bob. As for signatures, Eve can trick Bob into believing that her public key is Alice’s public key. Then Bob will trust whatever signature that Eve sends to him and believes it is a signature from Alice.</p>
<p>While the above scenario may seem hypothetical, it is entirely possible. The crux of the message is: everything is based on trust and there has to be secure key exchange - we have to know whether a public key actually belongs to who it says it belongs to and we cannot trust public keys blindly. Now, these are topics I barely know anything about and shall not go into =)</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.gnupg.org/gph/en/manual/x135.html">The GNU Privacy Handbook - Making and verifying signatures</a></li>
<li><a href="https://www.gnupg.org/gph/en/manual/x56.html">The GNU Privacy Handbook - Exchanging keys</a></li>
<li><a href="https://www.gnupg.org/gph/en/manual/x110.html">The GNU Privacy Handbook - Encrypting and decrypting documents</a></li>
<li><a href="https://stackoverflow.com/q/454048">What is the difference between encrypting and signing in asymmetric encryption?</a></li>
<li><a href="https://askubuntu.com/q/29889">How do I check if my OpenPGP key is in the Ubuntu keyserver?</a></li>
<li><a href="http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/">GPG Cheat Sheet</a></li>
<li><a href="https://superuser.com/q/619145">How to make GnuPG display full 8-byte/64-bit key ID?</a></li>
<li><a href="https://security.stackexchange.com/a/84281">Short OpenPGP key IDs are insecure, how to configure GnuPG to use long key IDs instead?</a></li>
</ul>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/2017-09-27-how-to-use-gpg-to-encrypt-stuff.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/2017-09-27-how-to-use-gpg-to-encrypt-stuff.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>The best way to install python on Mac OS X</title>
    <link href="http://blog.pangyanhan.com/posts/2017-08-11-the-best-way-to-install-python-on-mac-os-x.html" />
    <id>http://blog.pangyanhan.com/posts/2017-08-11-the-best-way-to-install-python-on-mac-os-x.html</id>
    <published>2017-08-11T08:10:15Z</published>
    <updated>2017-08-11T08:10:15Z</updated>
    <summary type="html"><![CDATA[<h2>The best way to install python on Mac OS X</h2>
<p class="meta">
  11 Aug 2017,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/python.html">python</a>, <a href="/tags/mac%20os%20x.html">mac os x</a>
</div>
<div class="post">
  <p><strong>NOTE:</strong> This post is pretty much opinion based on my own experience. Also take note of the date it was written because things might have changed since then. Your mileage may vary.</p>
<p>The best way to install python on Mac OS X is using <a href="https://github.com/pyenv/pyenv">pyenv</a>. Why do I say so?</p>
<ul>
<li>Mac OS X ships with python but does not seem to ship with virtualenv</li>
<li>You can install python using brew but again it does not seem to ship with virtualenv</li>
</ul>
<p>To me, using a sandbox environment like <a href="https://virtualenv.pypa.io/en/stable/">virtualenv</a> or <a href="https://conda.io/docs/intro.html">conda</a> is absolutely essential for pretty much any project that makes use of 3rd party libraries because I do not want to install any 3rd party library globally if possible. I am more familiar with virtualenv so most of the time it is my choice.</p>
<h2 id="installation-instructions">Installation instructions</h2>
<ol style="list-style-type: decimal">
<li>Follow the instructions at <a href="https://github.com/pyenv/pyenv#homebrew-on-mac-os-x" class="uri">https://github.com/pyenv/pyenv#homebrew-on-mac-os-x</a> to install pyenv using brew</li>
<li>Follow the instructions at <a href="https://github.com/pyenv/pyenv-virtualenv#installing-with-homebrew-for-os-x-users" class="uri">https://github.com/pyenv/pyenv-virtualenv#installing-with-homebrew-for-os-x-users</a> to install pyenv-virtualenv using brew</li>
<li>Now we need to install some version of python using pyenv. To see a list of python versions you can download and install using pyenv, run:</li>
</ol>
<div class="highlight"><pre><span></span>pyenv install -l
</pre></div>

<p>Suppose you want to install Python 3.5.1 . Run:</p>
<div class="highlight"><pre><span></span>pyenv install <span class="m">3</span>.5.1
</pre></div>

<ol start="4" style="list-style-type: decimal">
<li>Suppose you have a project called <code>myproject</code> you want to create a virtualenv for. This project happens to use Python 3.5.1 . To create this virtualenv, we run:</li>
</ol>
<div class="highlight"><pre><span></span>pyenv virtualenv <span class="m">3</span>.5.1 myproject
</pre></div>

<p>Now if you run <code>pyenv versions</code>, you should see something like the following:</p>
<div class="highlight"><pre><span></span>* system (set by /home/tom/.pyenv/version)
2.7.11
3.5.1
3.5.1/envs/myproject
myproject
</pre></div>

<p>So we see that the virtualenv <code>myproject</code> is created successfully.</p>
<ol start="5" style="list-style-type: decimal">
<li>To install libraries into the <code>myproject</code> virtualenv, we have to activate it using</li>
</ol>
<div class="highlight"><pre><span></span>pyenv activate myproject
</pre></div>

<p>You should see a <code>(myproject)</code> prefix in your shell’s prompt.</p>
<ol start="6" style="list-style-type: decimal">
<li>As long as you have the virtualenv activated, any Python libraries you install using pip will be installed into the virtualenv. Just run pip as per normal, for instance:</li>
</ol>
<div class="highlight"><pre><span></span>pip install <span class="nv">redis</span><span class="o">==</span><span class="m">2</span>.10.5
pip install -r requirements.txt
</pre></div>

<ol start="7" style="list-style-type: decimal">
<li>To deactivate the virtualenv:</li>
</ol>
<div class="highlight"><pre><span></span>pyenv deactivate
</pre></div>

</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/2017-08-11-the-best-way-to-install-python-on-mac-os-x.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/2017-08-11-the-best-way-to-install-python-on-mac-os-x.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>Haskell: demystifying composing compose with compose</title>
    <link href="http://blog.pangyanhan.com/posts/2017-08-10-haskell-demystifying-composing-compose-with-compose.html" />
    <id>http://blog.pangyanhan.com/posts/2017-08-10-haskell-demystifying-composing-compose-with-compose.html</id>
    <published>2017-08-10T23:05:10Z</published>
    <updated>2017-08-10T23:05:10Z</updated>
    <summary type="html"><![CDATA[<h2>Haskell: demystifying composing compose with compose</h2>
<p class="meta">
  10 Aug 2017,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/haskell.html">haskell</a>
</div>
<div class="post">
  <h2 id="problem-statement">Problem Statement</h2>
<p>Figure out the type of the following Haskell code, why it has that type, and what it does:</p>
<div class="highlight"><pre><span></span><span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span>
</pre></div>

<h2 id="solution">Solution</h2>
<p>It is trivial to type <code>:t (.) . (.)</code> into ghci to get the following:</p>
<div class="highlight"><pre><span></span>(.) . (.) :: (b -&gt; c) -&gt; (a1 -&gt; a -&gt; b) -&gt; a1 -&gt; a -&gt; c
</pre></div>

<p>What is more difficult is to figure out why this, and not something else, is the type of <code>(.) . (.)</code>. We shall do exactly that here.</p>
<p>First, we have to realize that <code>(.) . (.)</code> can also be written as:</p>
<div class="highlight"><pre><span></span>(.) (.) (.)
</pre></div>

<p>which is its prefix equivalent form. Then, we make use of the fact that in Haskell, function application is left associative. So the same code can be written as:</p>
<div class="highlight"><pre><span></span>((.) (.)) (.)
</pre></div>

<p>Now, we have the job of figuring out the type of:</p>
<div class="highlight"><pre><span></span>((.) (.))
</pre></div>

<p>If we type that into ghci, we get:</p>
<div class="highlight"><pre><span></span>(a1 -&gt; b -&gt; c) -&gt; a1 -&gt; (a -&gt; b) -&gt; a -&gt; c
</pre></div>

<p>which may actually look more intimidating than the type of <code>(.) . (.)</code>. So why does <code>(.) (.)</code> have the above type?</p>
<p>Recall that the compose operator <code>(.)</code> has type:</p>
<div class="highlight"><pre><span></span>(b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c
</pre></div>

<p>Now we try to match the types. In <code>(.) (.)</code>, we rename the type variables so that the <code>(.)</code> that serves as the argument has the type</p>
<div class="highlight"><pre><span></span>(b1 -&gt; c1) -&gt; (a1 -&gt; b1) -&gt; a1 -&gt; c1
</pre></div>

<p>Since this <code>(.)</code> is just 1 argument, we must have that <code>(b -&gt; c)</code> in the compose that’s being called be of type <code>(b1 -&gt; c1) -&gt; (a1 -&gt; b1) -&gt; a1 -&gt; c1</code>. Using the fact that the <code>-&gt;</code> operator is right associative, we must have the following type matches:</p>
<div class="highlight"><pre><span></span>b: (b1 -&gt; c1)
c: (a1 -&gt; b1) -&gt; a1 -&gt; c1
</pre></div>

<p>So after taking <code>(.)</code> as its first argument, the type of the compose being called is now:</p>
<div class="highlight"><pre><span></span>(a -&gt; b) -&gt; a -&gt; c
</pre></div>

<p>before substitution. Now we perform the substitution and get:</p>
<div class="highlight"><pre><span></span>(a -&gt; (b1 -&gt; c1)) -&gt; a -&gt; (a1 -&gt; b1) -&gt; a1 -&gt; c1
</pre></div>

<p>Renaming <code>b1</code> to <code>b</code> and <code>c1</code> to <code>c</code>, we get</p>
<div class="highlight"><pre><span></span>(a -&gt; (b -&gt; c)) -&gt; a -&gt; (a1 -&gt; b) -&gt; a1 -&gt; c
</pre></div>

<p>We can also remove the inner parentheses in <code>(a -&gt; (b -&gt; c))</code> (because there are only 1 argument functions in Haskell) to get:</p>
<div class="highlight"><pre><span></span>(a -&gt; b -&gt; c) -&gt; a -&gt; (a1 -&gt; b) -&gt; a1 -&gt; c
</pre></div>

<p>Then we swap the names of <code>a1</code> and <code>a</code> to get:</p>
<div class="highlight"><pre><span></span>(a1 -&gt; b -&gt; c) -&gt; a1 -&gt; (a -&gt; b) -&gt; a -&gt; c
</pre></div>

<p>which is the type of <code>(.) (.)</code> that we got from ghci.</p>
<p>Now that we got the type of <code>(.) (.)</code>, we have to figure out the type of <code>((.) (.)) (.)</code>, or equivalently, <code>(.) (.) (.)</code>. We rename the type variables of the <code>(.)</code> argument so that it has type <code>(b2 -&gt; c2) -&gt; (a2 -&gt; b2) -&gt; a2 -&gt; c2</code>. Doing some pattern matching between this and the type of <code>(.) (.)</code>, we get:</p>
<div class="highlight"><pre><span></span>a1: (b2 -&gt; c2)
b:  (a2 -&gt; b2)
c:  a2 -&gt; c2
</pre></div>

<p>After applying <code>(.) (.)</code> with <code>(.)</code>, its type pre-substitution is:</p>
<div class="highlight"><pre><span></span>a1 -&gt; (a -&gt; b) -&gt; a -&gt; c
</pre></div>

<p>Now we substitute what we got from pattern matching on the types to get:</p>
<div class="highlight"><pre><span></span>(b2 -&gt; c2) -&gt; (a -&gt; (a2 -&gt; b2)) -&gt; a -&gt; a2 -&gt; c2
</pre></div>

<p>We can get rid of the inner parentheses in the second argument and rename <code>b2</code> to <code>b</code>, rename <code>c2</code> to <code>c</code> to get:</p>
<div class="highlight"><pre><span></span>(b -&gt; c) -&gt; (a -&gt; a2 -&gt; b) -&gt; a -&gt; a2 -&gt; c
</pre></div>

<p>We can rename <code>a</code> to <code>a1</code> and <code>a2</code> to <code>a</code> to get</p>
<div class="highlight"><pre><span></span>(b -&gt; c) -&gt; (a1 -&gt; a -&gt; b) -&gt; a1 -&gt; a -&gt; c
</pre></div>

<p>which is what we want. If we erroneously started out pattern matching the type signature of compose with its 2 arguments which also happen to be compose, we can probably never arrive at the correct type signature. Just look at the type of the second argument of <code>(.) . (.)</code> - it is <code>a1 -&gt; a -&gt; b</code>, a function with 2 arguments! Who would have known!</p>
<h2 id="context">Context</h2>
<p>I was reading about the ST monad when I encountered this answer: <a href="https://stackoverflow.com/a/28146074" class="uri">https://stackoverflow.com/a/28146074</a>. When I saw the following snippet of code:</p>
<div class="highlight"><pre><span></span><span class="nf">swap</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="p">(</span><span class="o">.*</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span>

<span class="nf">filterAccum</span> <span class="ow">::</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="kt">Bool</span><span class="p">,</span> <span class="n">a</span><span class="p">))</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>
<span class="nf">filterAccum</span> <span class="n">f</span> <span class="n">a</span> <span class="n">xs</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">|</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="kt">True</span><span class="p">)</span> <span class="ow">&lt;-</span> <span class="n">zip</span> <span class="n">xs</span> <span class="o">$</span> <span class="n">snd</span> <span class="o">$</span> <span class="n">mapAccumL</span> <span class="p">(</span><span class="n">swap</span> <span class="o">.*</span> <span class="n">f</span><span class="p">)</span> <span class="n">a</span> <span class="n">xs</span><span class="p">]</span>
</pre></div>

<p>I was flabbergasted at the definition <code>(.*) = (.) . (.)</code>, and how <code>.*</code> was later used in <code>(swap .* f)</code>. It looked so surreal (just like a lot of Haskell code I’m seeing). I was thinking - no way this works. Then I copied and pasted a slightly modified version of this into a file and compiled it, and it worked. Magically.</p>
<p>Next thing I know, I was figuring out the type of <code>(.) . (.)</code> the wrong way, by pattern matching the types of the arguments directly onto the type of the function, which was exactly what I said not to do at the end of the solution. I thought this will make a good, short blog post, so here we are. I believe that once upon a time I have chanced across a blog post explaining this same topic, but obviously my googling skills weren’t up to par.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://stackoverflow.com/a/28146074" class="uri">https://stackoverflow.com/a/28146074</a>; a Stack Overflow answer to the question <a href="https://stackoverflow.com/q/28139259">Why do we need monads?</a>, by <a href="https://stackoverflow.com/users/3237465/user3237465">user3237465</a></li>
</ul>
</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/2017-08-10-haskell-demystifying-composing-compose-with-compose.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/2017-08-10-haskell-demystifying-composing-compose-with-compose.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>
<entry>
    <title>haskell-vim-now / ghcmod-vim: Resolving 'ghcmod#command#type Cannot guess type' errors</title>
    <link href="http://blog.pangyanhan.com/posts/2017-07-02-haskell-vim-now-ghcmod-vim-resolving-ghcmod-command-type-cannot-guess-type-errors.html" />
    <id>http://blog.pangyanhan.com/posts/2017-07-02-haskell-vim-now-ghcmod-vim-resolving-ghcmod-command-type-cannot-guess-type-errors.html</id>
    <published>2017-07-02T10:14:05Z</published>
    <updated>2017-07-02T10:14:05Z</updated>
    <summary type="html"><![CDATA[<h2>haskell-vim-now / ghcmod-vim: Resolving 'ghcmod#command#type Cannot guess type' errors</h2>
<p class="meta">
  02 Jul 2017,
  
    by <span class="italic">Pang Yan Han</span>
  
</p>
<div class="post-tags">
  <i class="fa fa-tags"></i>Tags: <a href="/tags/haskell.html">haskell</a>, <a href="/tags/vim.html">vim</a>, <a href="/tags/haskell-vim-now.html">haskell-vim-now</a>, <a href="/tags/ghcmod-vim.html">ghcmod-vim</a>, <a href="/tags/ghc-mod.html">ghc-mod</a>
</div>
<div class="post">
  <p><strong>NOTE:</strong> This post features a very hacky way to work around things which will likely never be merged into the ghcmod-vim project. It is just a place for me to document what has worked for myself in case I encounter the same issue again. <strong>This also assumes you are primarily using <a href="https://docs.haskellstack.org/en/stable/README/">Stack</a> for your Haskell projects.</strong></p>
<h2 id="introduction-problem-statement">Introduction / Problem Statement</h2>
<p>Yesterday afternoon, I took some time to install <a href="https://github.com/begriffs/haskell-vim-now">haskell-vim-now</a>. Among the list of features I saw on the README, what caught my attention was its ability to show the type of an expression in Haskell source code by typing <code>,ht</code> in normal mode. So I tried it on a Haskell file and I see the following text in red at the status line:</p>
<div class="highlight"><pre><span></span>ghcmod#command#type: Cannot guess type
</pre></div>

<p>It was pretty devastating for me to see this. After all, the installation took closer to an hour than 10 minutes. This morning I decided to do more googling and figured out the reason, which is stated right here: <a href="https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue" class="uri">https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue</a></p>
<p>It turns out that haskell-vim-now uses ghcmod-vim which in turn calls ghc-mod to retrieve the type of the expression under our vim cursor when we press <code>,ht</code>. But because I was using Stack, the GHC and the libraries I was using to compile the Haskell source code is different from the GHC that ghcmod-vim was using to infer the types.</p>
<p>Here’s the output I got:</p>
<div class="highlight"><pre><span></span>$ ghc-mod --version
ghc-mod version 5.7.0.0 compiled by GHC 8.0.2
</pre></div>

<p>versus</p>
<div class="highlight"><pre><span></span>$ stack exec ghc -- --version
The Glorious Glasgow Haskell Compilation System, version 7.10.3
</pre></div>

<p>Notice the difference in the GHC versions.</p>
<p>The workaround stated in <a href="https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue" class="uri">https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue</a> only works to a certain extent for myself (will be explained later). Below, I present a step by step solution to solve the problem.</p>
<h2 id="the-solution">The solution</h2>
<p>To set things straight, the <code>ghc-mod</code> invoked by the <code>ghc-mod --version</code> command above is installed in <code>${HOME}/.local/bin</code> by haskell-vim-now. Other than the fact that it may be using a different GHC version from what your Haskell project uses, it may also be missing the libraries needed by your project. What we want is to</p>
<ol style="list-style-type: decimal">
<li>install ghc-mod inside our project</li>
<li>let ghcmod-vim invoke the ghc-mod that is installed inside our project</li>
</ol>
<h3 id="step-1.-install-ghc-mod-inside-your-project">Step 1. Install ghc-mod inside your project</h3>
<p>This assumes that your Haskell source code is inside its own Stack project (created by <code>stack new</code>). If so, cd into the project’s directory and run:</p>
<div class="highlight"><pre><span></span>stack install ghc-mod
</pre></div>

<p>This step is essentially the same as the workaround given in <a href="https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue" class="uri">https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue</a></p>
<h3 id="step-2.-modify-the-ghcmod-vim-plugin-source-code-to-use-the-correct-ghc-mod">Step 2. Modify the ghcmod-vim plugin source code to use the correct ghc-mod</h3>
<p>haskell-vim-now installs the ghcmod-vim plugin in <code>${HOME}/.vim/bundle/ghcmod-vim</code>. I figured out that at some point it has to invoke the ghc-mod command. We just need to change appropriate occurrences of <code>ghc-mod</code> to <code>stack exec ghc-mod</code> so that ghcmod-vim will use the ghc-mod we installed in Step 1. A little browsing around and git grep reveals the following points where code needs to be changed:</p>
<p><strong>NOTE:</strong> The following required source code changes are based on commit <a href="https://github.com/eagletmt/ghcmod-vim/commit/1d192d13d68ab59f9f46497a0909bf24a7b7dfff">1d192d13d68ab59f9f46497a0909bf24a7b7dfff</a> of ghcmod-vim. Things may have changed since the time of writing of this post. Hence for the best effect, please run the <code>git grep -n &quot;\['ghc-mod'&quot;</code> command in <code>${HOME}/.vim/bundle/ghcmod-vim</code> to figure out where you need to change the code and use the files below as a reference.</p>
<p><strong>Point one:</strong> <a href="https://github.com/eagletmt/ghcmod-vim/blob/1d192d13d68ab59f9f46497a0909bf24a7b7dfff/autoload/ghcmod.vim#L248" class="uri">https://github.com/eagletmt/ghcmod-vim/blob/1d192d13d68ab59f9f46497a0909bf24a7b7dfff/autoload/ghcmod.vim#L248</a></p>
<p>Modify:</p>
<div class="highlight"><pre><span></span>let l:cmd = [&#39;ghc-mod&#39;, &#39;--silent&#39;]
</pre></div>

<p>to</p>
<div class="highlight"><pre><span></span>let l:cmd = [&#39;stack&#39;, &#39;exec&#39;, &#39;--&#39;, &#39;ghc-mod&#39;, &#39;--silent&#39;]
</pre></div>

<p>And in fact this was sufficient to let <code>,ht</code> correctly infer the type of an expression, because this code is inside the <code>ghcmod#build_command</code> vim function and is used by various parts of the code to build the actual <code>ghc-mod</code> command.</p>
<p><strong>Point two:</strong> <a href="https://github.com/eagletmt/ghcmod-vim/blob/1d192d13d68ab59f9f46497a0909bf24a7b7dfff/autoload/ghcmod.vim#L344" class="uri">https://github.com/eagletmt/ghcmod-vim/blob/1d192d13d68ab59f9f46497a0909bf24a7b7dfff/autoload/ghcmod.vim#L344</a></p>
<p>Modify:</p>
<div class="highlight"><pre><span></span>\ substitute(vimproc#system([&#39;ghc-mod&#39;, &#39;--silent&#39;, &#39;root&#39;]), &#39;\n*$&#39;, &#39;&#39;, &#39;&#39;)
</pre></div>

<p>to:</p>
<div class="highlight"><pre><span></span>\ substitute(vimproc#system([&#39;stack&#39;, &#39;exec&#39;, &#39;--&#39;, &#39;ghc-mod&#39;, &#39;--silent&#39;, &#39;root&#39;]), &#39;\n*$&#39;, &#39;&#39;, &#39;&#39;)
</pre></div>

<p><strong>Point three:</strong> <a href="https://github.com/eagletmt/ghcmod-vim/blob/1d192d13d68ab59f9f46497a0909bf24a7b7dfff/autoload/ghcmod/util.vim#L109" class="uri">https://github.com/eagletmt/ghcmod-vim/blob/1d192d13d68ab59f9f46497a0909bf24a7b7dfff/autoload/ghcmod/util.vim#L109</a></p>
<p>Modify:</p>
<div class="highlight"><pre><span></span>let l:ghcmod = vimproc#system([&#39;ghc-mod&#39;,&#39;version&#39;])
</pre></div>

<p>to:</p>
<div class="highlight"><pre><span></span>let l:ghcmod = vimproc#system([&#39;stack&#39;, &#39;exec&#39;, &#39;ghc-mod&#39;,&#39;version&#39;])
</pre></div>

<h3 id="step-3-restart-vim">Step 3: Restart vim</h3>
<p>This should be pretty obvious but it’s here for completeness.</p>
<h2 id="afterthoughts-additional-notes">Afterthoughts / Additional Notes</h2>
<p>What did not work for me in the workaround stated at <a href="https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue" class="uri">https://github.com/DanielG/ghc-mod/wiki#most-common-stack-related-issue</a> was having the <code>,ht</code> command work after running vim using <code>stack exec</code>, like <code>stack exec -- vim source-file.hs</code>. Contrary to what is stated, running vim like this does not add the directory containing the current Haskell project’s <code>ghc-mod</code> binary (that we installed via <code>stack install ghc-mod</code> in Step 1 of the solution) to the <code>PATH</code> environment variable. As such, the <code>ghc-mod</code> vim that’s invoked by the ghcmod-vim plugin is still the one installed in <code>${HOME}/.local/bin</code>.</p>
<p>Because there are a few layers of abstraction, you might want to check if using <code>ghc-mod</code> directly on a Haskell source file actually works. Assuming you have already carried out step 1 of the solution above, simply run <code>stack exec ghc-mod type source-file.hs row col</code> and see if there is meaningful output (of course replacing <code>source-file.hs</code>, <code>row</code>, <code>col</code> with appropriate values).</p>
<p>For instance, given the following source file named <code>hello.hs</code>:</p>
<div class="highlight"><pre><span></span>main :: IO ()
main = putStrLn &quot;Hello, World!&quot;
</pre></div>

<p>To find out the type of <code>putStrLn</code>, run:</p>
<div class="highlight"><pre><span></span>stack exec ghc-mod type hello.hs 2 8
</pre></div>

<p>You should see the following output:</p>
<div class="highlight"><pre><span></span>2 8 2 16 &quot;String -&gt; IO ()&quot;
2 8 2 32 &quot;IO ()&quot;
2 1 2 32 &quot;IO ()&quot;
</pre></div>

</div>
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'pangyanhan'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/2017-07-02-haskell-vim-now-ghcmod-vim-resolving-ghcmod-command-type-cannot-guess-type-errors.md";
        var disqus_url = "http://blog.pangyanhan.com/posts/2017-07-02-haskell-vim-now-ghcmod-vim-resolving-ghcmod-command-type-cannot-guess-type-errors.html";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
]]></summary>
</entry>

</feed>
